"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackagesOrder = void 0;
const toposort_1 = __importDefault(require("toposort"));
function allDependencies(packageJson) {
    if (!packageJson.dependencies &&
        !packageJson.peerDependencies &&
        !packageJson.optionalDependencies) {
        return undefined;
    }
    return {
        ...packageJson.dependencies,
        ...packageJson.peerDependencies,
        ...packageJson.optionalDependencies,
    };
}
function getPackagesOrder({ packageJsonContents, }) {
    function searchNestedDependencies(ownerName, dependencies, dependenciesSet, parents) {
        if (dependencies) {
            const dependencyNames = Object.keys(dependencies);
            for (const dependencyName of dependencyNames) {
                if (dependencyName === ownerName) {
                    const parentsNames = parents.join(' < ');
                    throw new Error(`package.json files have circularly referenced dependencies : "${ownerName}" in "${parentsNames} < ${dependencyName}"`);
                }
                dependenciesSet.add(dependencyName);
                // find dependencyName on the packageJsonContents
                const childPackageJson = packageJsonContents.find(({ name }) => dependencyName === name);
                // if childPackageJson is exists search childPackageJson's dependencies
                if (childPackageJson && childPackageJson.dependencies) {
                    searchNestedDependencies(ownerName, allDependencies(childPackageJson), dependenciesSet, [...parents, dependencyName]);
                }
            }
        }
        return dependenciesSet;
    }
    const packagesMap = packageJsonContents.reduce((map, packageJson) => {
        if (!packageJson.name) {
            throw new Error(`Undefined "name" field on ${packageJson}`);
        }
        map.set(packageJson.name, {
            name: packageJson.name,
            dependencies: searchNestedDependencies(packageJson.name, allDependencies(packageJson), new Set(), [packageJson.name]),
        });
        return map;
    }, new Map());
    const edges = [];
    for (const [name, { dependencies }] of packagesMap) {
        for (const dep of dependencies) {
            if (packagesMap.has(dep)) {
                edges.push([name, dep]);
            }
        }
    }
    const sorted = toposort_1.default(edges).reverse();
    return [
        ...Array.from(packagesMap.values()).filter(({ name }) => !sorted.includes(name)),
        ...sorted.map((name) => {
            return packagesMap.get(name);
        }),
    ];
}
exports.getPackagesOrder = getPackagesOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGFja2FnZXNPcmRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9Ac3Nlbi9jb2xsZWN0LWRlcGVuZGVuY2llcy9nZXRQYWNrYWdlc09yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUFnQztBQVloQyxTQUFTLGVBQWUsQ0FDdEIsV0FBd0I7SUFFeEIsSUFDRSxDQUFDLFdBQVcsQ0FBQyxZQUFZO1FBQ3pCLENBQUMsV0FBVyxDQUFDLGdCQUFnQjtRQUM3QixDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFDakM7UUFDQSxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELE9BQU87UUFDTCxHQUFHLFdBQVcsQ0FBQyxZQUFZO1FBQzNCLEdBQUcsV0FBVyxDQUFDLGdCQUFnQjtRQUMvQixHQUFHLFdBQVcsQ0FBQyxvQkFBb0I7S0FDcEMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFnQixnQkFBZ0IsQ0FBQyxFQUMvQixtQkFBbUIsR0FDWjtJQUNQLFNBQVMsd0JBQXdCLENBQy9CLFNBQWlCLEVBQ2pCLFlBQWdELEVBQ2hELGVBQTRCLEVBQzVCLE9BQWlCO1FBRWpCLElBQUksWUFBWSxFQUFFO1lBQ2hCLE1BQU0sZUFBZSxHQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFNUQsS0FBSyxNQUFNLGNBQWMsSUFBSSxlQUFlLEVBQUU7Z0JBQzVDLElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRTtvQkFDaEMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDekMsTUFBTSxJQUFJLEtBQUssQ0FDYixpRUFBaUUsU0FBUyxTQUFTLFlBQVksTUFBTSxjQUFjLEdBQUcsQ0FDdkgsQ0FBQztpQkFDSDtnQkFFRCxlQUFlLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUVwQyxpREFBaUQ7Z0JBQ2pELE1BQU0sZ0JBQWdCLEdBQ3BCLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsQ0FBQztnQkFFbEUsdUVBQXVFO2dCQUN2RSxJQUFJLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLFlBQVksRUFBRTtvQkFDckQsd0JBQXdCLENBQ3RCLFNBQVMsRUFDVCxlQUFlLENBQUMsZ0JBQWdCLENBQUMsRUFDakMsZUFBZSxFQUNmLENBQUMsR0FBRyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQzdCLENBQUM7aUJBQ0g7YUFDRjtTQUNGO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU0sV0FBVyxHQUFnQyxtQkFBbUIsQ0FBQyxNQUFNLENBQ3pFLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDN0Q7UUFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDeEIsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJO1lBQ3RCLFlBQVksRUFBRSx3QkFBd0IsQ0FDcEMsV0FBVyxDQUFDLElBQUksRUFDaEIsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUM1QixJQUFJLEdBQUcsRUFBRSxFQUNULENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUNuQjtTQUNGLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUNELElBQUksR0FBRyxFQUEwQixDQUNsQyxDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQXVCLEVBQUUsQ0FBQztJQUVyQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxJQUFJLFdBQVcsRUFBRTtRQUNsRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRTtZQUM5QixJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN6QjtTQUNGO0tBQ0Y7SUFFRCxNQUFNLE1BQU0sR0FBRyxrQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXpDLE9BQU87UUFDTCxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUN4QyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FDckM7UUFDRCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztBQUNKLENBQUM7QUFsRkQsNENBa0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRvcG9zb3J0IGZyb20gJ3RvcG9zb3J0JztcbmltcG9ydCB7IFBhY2thZ2VKc29uIH0gZnJvbSAndHlwZS1mZXN0JztcblxuaW50ZXJmYWNlIFBhY2thZ2VKc29uU2V0IHtcbiAgbmFtZTogc3RyaW5nO1xuICBkZXBlbmRlbmNpZXM6IFNldDxzdHJpbmc+O1xufVxuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgcGFja2FnZUpzb25Db250ZW50czogUGFja2FnZUpzb25bXTtcbn1cblxuZnVuY3Rpb24gYWxsRGVwZW5kZW5jaWVzKFxuICBwYWNrYWdlSnNvbjogUGFja2FnZUpzb24sXG4pOiBQYWNrYWdlSnNvbi5EZXBlbmRlbmN5IHwgdW5kZWZpbmVkIHtcbiAgaWYgKFxuICAgICFwYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMgJiZcbiAgICAhcGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyAmJlxuICAgICFwYWNrYWdlSnNvbi5vcHRpb25hbERlcGVuZGVuY2llc1xuICApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMsXG4gICAgLi4ucGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyxcbiAgICAuLi5wYWNrYWdlSnNvbi5vcHRpb25hbERlcGVuZGVuY2llcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhY2thZ2VzT3JkZXIoe1xuICBwYWNrYWdlSnNvbkNvbnRlbnRzLFxufTogUGFyYW1zKTogUGFja2FnZUpzb25TZXRbXSB7XG4gIGZ1bmN0aW9uIHNlYXJjaE5lc3RlZERlcGVuZGVuY2llcyhcbiAgICBvd25lck5hbWU6IHN0cmluZyxcbiAgICBkZXBlbmRlbmNpZXM6IFBhY2thZ2VKc29uLkRlcGVuZGVuY3kgfCB1bmRlZmluZWQsXG4gICAgZGVwZW5kZW5jaWVzU2V0OiBTZXQ8c3RyaW5nPixcbiAgICBwYXJlbnRzOiBzdHJpbmdbXSxcbiAgKTogU2V0PHN0cmluZz4ge1xuICAgIGlmIChkZXBlbmRlbmNpZXMpIHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lczogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhkZXBlbmRlbmNpZXMpO1xuXG4gICAgICBmb3IgKGNvbnN0IGRlcGVuZGVuY3lOYW1lIG9mIGRlcGVuZGVuY3lOYW1lcykge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeU5hbWUgPT09IG93bmVyTmFtZSkge1xuICAgICAgICAgIGNvbnN0IHBhcmVudHNOYW1lcyA9IHBhcmVudHMuam9pbignIDwgJyk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHBhY2thZ2UuanNvbiBmaWxlcyBoYXZlIGNpcmN1bGFybHkgcmVmZXJlbmNlZCBkZXBlbmRlbmNpZXMgOiBcIiR7b3duZXJOYW1lfVwiIGluIFwiJHtwYXJlbnRzTmFtZXN9IDwgJHtkZXBlbmRlbmN5TmFtZX1cImAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlcGVuZGVuY2llc1NldC5hZGQoZGVwZW5kZW5jeU5hbWUpO1xuXG4gICAgICAgIC8vIGZpbmQgZGVwZW5kZW5jeU5hbWUgb24gdGhlIHBhY2thZ2VKc29uQ29udGVudHNcbiAgICAgICAgY29uc3QgY2hpbGRQYWNrYWdlSnNvbjogUGFja2FnZUpzb24gfCB1bmRlZmluZWQgPVxuICAgICAgICAgIHBhY2thZ2VKc29uQ29udGVudHMuZmluZCgoeyBuYW1lIH0pID0+IGRlcGVuZGVuY3lOYW1lID09PSBuYW1lKTtcblxuICAgICAgICAvLyBpZiBjaGlsZFBhY2thZ2VKc29uIGlzIGV4aXN0cyBzZWFyY2ggY2hpbGRQYWNrYWdlSnNvbidzIGRlcGVuZGVuY2llc1xuICAgICAgICBpZiAoY2hpbGRQYWNrYWdlSnNvbiAmJiBjaGlsZFBhY2thZ2VKc29uLmRlcGVuZGVuY2llcykge1xuICAgICAgICAgIHNlYXJjaE5lc3RlZERlcGVuZGVuY2llcyhcbiAgICAgICAgICAgIG93bmVyTmFtZSxcbiAgICAgICAgICAgIGFsbERlcGVuZGVuY2llcyhjaGlsZFBhY2thZ2VKc29uKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY2llc1NldCxcbiAgICAgICAgICAgIFsuLi5wYXJlbnRzLCBkZXBlbmRlbmN5TmFtZV0sXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZXBlbmRlbmNpZXNTZXQ7XG4gIH1cblxuICBjb25zdCBwYWNrYWdlc01hcDogTWFwPHN0cmluZywgUGFja2FnZUpzb25TZXQ+ID0gcGFja2FnZUpzb25Db250ZW50cy5yZWR1Y2UoXG4gICAgKG1hcCwgcGFja2FnZUpzb24pID0+IHtcbiAgICAgIGlmICghcGFja2FnZUpzb24ubmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZGVmaW5lZCBcIm5hbWVcIiBmaWVsZCBvbiAke3BhY2thZ2VKc29ufWApO1xuICAgICAgfVxuXG4gICAgICBtYXAuc2V0KHBhY2thZ2VKc29uLm5hbWUsIHtcbiAgICAgICAgbmFtZTogcGFja2FnZUpzb24ubmFtZSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBzZWFyY2hOZXN0ZWREZXBlbmRlbmNpZXMoXG4gICAgICAgICAgcGFja2FnZUpzb24ubmFtZSxcbiAgICAgICAgICBhbGxEZXBlbmRlbmNpZXMocGFja2FnZUpzb24pLFxuICAgICAgICAgIG5ldyBTZXQoKSxcbiAgICAgICAgICBbcGFja2FnZUpzb24ubmFtZV0sXG4gICAgICAgICksXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIG5ldyBNYXA8c3RyaW5nLCBQYWNrYWdlSnNvblNldD4oKSxcbiAgKTtcblxuICBjb25zdCBlZGdlczogW3N0cmluZywgc3RyaW5nXVtdID0gW107XG5cbiAgZm9yIChjb25zdCBbbmFtZSwgeyBkZXBlbmRlbmNpZXMgfV0gb2YgcGFja2FnZXNNYXApIHtcbiAgICBmb3IgKGNvbnN0IGRlcCBvZiBkZXBlbmRlbmNpZXMpIHtcbiAgICAgIGlmIChwYWNrYWdlc01hcC5oYXMoZGVwKSkge1xuICAgICAgICBlZGdlcy5wdXNoKFtuYW1lLCBkZXBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBzb3J0ZWQgPSB0b3Bvc29ydChlZGdlcykucmV2ZXJzZSgpO1xuXG4gIHJldHVybiBbXG4gICAgLi4uQXJyYXkuZnJvbShwYWNrYWdlc01hcC52YWx1ZXMoKSkuZmlsdGVyKFxuICAgICAgKHsgbmFtZSB9KSA9PiAhc29ydGVkLmluY2x1ZGVzKG5hbWUpLFxuICAgICksXG4gICAgLi4uc29ydGVkLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIHBhY2thZ2VzTWFwLmdldChuYW1lKSE7XG4gICAgfSksXG4gIF07XG59XG4iXX0=