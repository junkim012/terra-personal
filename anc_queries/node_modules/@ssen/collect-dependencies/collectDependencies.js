import { builtinModules } from 'module';
import ts from 'typescript';
const nodeAPIList = new Set(builtinModules);
export const collectTypeScript = {
    extensions: ['.ts', '.tsx'],
    excludes: [
        // exclude tests
        '**/*.(spec|test).(js|jsx|ts|tsx)',
        '**/__*',
        // exclude public
        '**/public',
        '**/bin',
        // exclude javascript
        '**/*.js',
        '**/*.jsx',
    ],
    includes: ['**/*'],
};
export const collectScripts = {
    extensions: ['.js', '.jsx', '.ts', '.tsx'],
    excludes: [
        // exclude tests
        '**/*.(spec|test).(js|jsx|ts|tsx)',
        '**/__*',
        // exclude public
        '**/public',
        '**/bin',
        // exclude public
        '**/public',
    ],
    includes: ['**/*'],
};
export async function collectDependencies({ rootDir, internalPackages = new Map(), externalPackages, extensions = collectTypeScript.extensions, excludes = collectTypeScript.excludes, includes = collectTypeScript.includes, compilerOptions = {}, selfNames = new Set(), fixImportPath, checkUndefinedPackage = 'error', }) {
    compilerOptions = {
        allowJs: extensions.some((ext) => /^.js/.test(ext)),
        ...compilerOptions,
        rootDir,
    };
    const host = ts.createCompilerHost(compilerOptions);
    const files = host.readDirectory(rootDir, extensions, excludes, includes);
    const program = ts.createProgram(files, compilerOptions, host);
    const importPaths = new Set();
    for (const file of files) {
        const sourceFile = program.getSourceFile(file);
        if (!sourceFile)
            continue;
        function search(node) {
            // import from '?'
            if (ts.isImportDeclaration(node) &&
                ts.isStringLiteralLike(node.moduleSpecifier) &&
                node.moduleSpecifier.text) {
                const importPath = node.moduleSpecifier.text;
                importPaths.add(typeof fixImportPath === 'function'
                    ? fixImportPath({
                        importPath,
                        filePath: file,
                    })
                    : importPath);
            }
            // import('?')
            else if (ts.isCallExpression(node) &&
                node.expression.kind === ts.SyntaxKind.ImportKeyword &&
                ts.isStringLiteralLike(node.arguments[0])) {
                const importPath = node.arguments[0]
                    .text;
                importPaths.add(typeof fixImportPath === 'function'
                    ? fixImportPath({
                        importPath,
                        filePath: file,
                    })
                    : importPath);
            }
            // require.resolve('?')
            else if (ts.isCallExpression(node) &&
                ts.isPropertyAccessExpression(node.expression) &&
                ts.isIdentifier(node.expression.expression) &&
                node.expression.expression.escapedText === 'require' &&
                node.expression.name.escapedText === 'resolve' &&
                ts.isStringLiteralLike(node.arguments[0])) {
                const importPath = node.arguments[0]
                    .text;
                importPaths.add(typeof fixImportPath === 'function'
                    ? fixImportPath({
                        importPath,
                        filePath: file,
                    })
                    : importPath);
            }
            // require('?')
            else if (ts.isCallExpression(node) &&
                ts.isIdentifier(node.expression) &&
                node.expression.escapedText === 'require' &&
                ts.isStringLiteralLike(node.arguments[0])) {
                const importPath = node.arguments[0]
                    .text;
                importPaths.add(typeof fixImportPath === 'function'
                    ? fixImportPath({
                        importPath,
                        filePath: file,
                    })
                    : importPath);
            }
            ts.forEachChild(node, search);
        }
        search(sourceFile);
    }
    const imports = {};
    for (const importPath of importPaths) {
        const packageName = /^@/.test(importPath)
            ? importPath.split('/').slice(0, 2).join('/')
            : importPath.split('/')[0];
        if (!imports[packageName] &&
            !selfNames.has(packageName) &&
            !/^\./.test(packageName) &&
            !nodeAPIList.has(packageName)) {
            const internalPackage = internalPackages.get(packageName);
            if (internalPackage) {
                imports[packageName] = `^${internalPackage.version}`;
            }
            else if (externalPackages[packageName]) {
                imports[packageName] = externalPackages[packageName];
            }
            else if (checkUndefinedPackage === 'error') {
                throw new Error(`Undefined package "${packageName}" from "${importPath}"`);
            }
        }
    }
    return imports;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdERlcGVuZGVuY2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Ac3Nlbi9jb2xsZWN0LWRlcGVuZGVuY2llcy9jb2xsZWN0RGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFeEMsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRzVCLE1BQU0sV0FBVyxHQUFnQixJQUFJLEdBQUcsQ0FBUyxjQUFjLENBQUMsQ0FBQztBQUVqRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FJMUI7SUFDRixVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQzNCLFFBQVEsRUFBRTtRQUNSLGdCQUFnQjtRQUNoQixrQ0FBa0M7UUFDbEMsUUFBUTtRQUVSLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsUUFBUTtRQUVSLHFCQUFxQjtRQUNyQixTQUFTO1FBQ1QsVUFBVTtLQUNYO0lBQ0QsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDO0NBQ25CLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBSXZCO0lBQ0YsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDO0lBQzFDLFFBQVEsRUFBRTtRQUNSLGdCQUFnQjtRQUNoQixrQ0FBa0M7UUFDbEMsUUFBUTtRQUVSLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsUUFBUTtRQUVSLGlCQUFpQjtRQUNqQixXQUFXO0tBQ1o7SUFDRCxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7Q0FDbkIsQ0FBQztBQXVCRixNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUFDLEVBQ3hDLE9BQU8sRUFDUCxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUM1QixnQkFBZ0IsRUFDaEIsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFVBQVUsRUFDekMs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Q0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDN0MsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0IsSUFDRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7WUFDckIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztZQUMzQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ3hCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFDN0I7WUFDQSxNQUFNLGVBQWUsR0FBNEIsZ0JBQWdCLENBQUMsR0FBRyxDQUNuRSxXQUFXLENBQ1osQ0FBQztZQUVGLElBQUksZUFBZSxFQUFFO2dCQUNuQixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDdEQ7aUJBQU0sSUFBSSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDeEMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3REO2lCQUFNLElBQUkscUJBQXFCLEtBQUssT0FBTyxFQUFFO2dCQUM1QyxNQUFNLElBQUksS0FBSyxDQUNiLHNCQUFzQixXQUFXLFdBQVcsVUFBVSxHQUFHLENBQzFELENBQUM7YUFDSDtTQUNGO0tBQ0Y7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbHRpbk1vZHVsZXMgfSBmcm9tICdtb2R1bGUnO1xuaW1wb3J0IHsgUGFja2FnZUpzb24gfSBmcm9tICd0eXBlLWZlc3QnO1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgUGFja2FnZUluZm8gfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3Qgbm9kZUFQSUxpc3Q6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KGJ1aWx0aW5Nb2R1bGVzKTtcblxuZXhwb3J0IGNvbnN0IGNvbGxlY3RUeXBlU2NyaXB0OiB7XG4gIGV4dGVuc2lvbnM6IHN0cmluZ1tdO1xuICBleGNsdWRlczogc3RyaW5nW107XG4gIGluY2x1ZGVzOiBzdHJpbmdbXTtcbn0gPSB7XG4gIGV4dGVuc2lvbnM6IFsnLnRzJywgJy50c3gnXSxcbiAgZXhjbHVkZXM6IFtcbiAgICAvLyBleGNsdWRlIHRlc3RzXG4gICAgJyoqLyouKHNwZWN8dGVzdCkuKGpzfGpzeHx0c3x0c3gpJyxcbiAgICAnKiovX18qJyxcblxuICAgIC8vIGV4Y2x1ZGUgcHVibGljXG4gICAgJyoqL3B1YmxpYycsXG4gICAgJyoqL2JpbicsXG5cbiAgICAvLyBleGNsdWRlIGphdmFzY3JpcHRcbiAgICAnKiovKi5qcycsXG4gICAgJyoqLyouanN4JyxcbiAgXSxcbiAgaW5jbHVkZXM6IFsnKiovKiddLFxufTtcblxuZXhwb3J0IGNvbnN0IGNvbGxlY3RTY3JpcHRzOiB7XG4gIGV4dGVuc2lvbnM6IHN0cmluZ1tdO1xuICBleGNsdWRlczogc3RyaW5nW107XG4gIGluY2x1ZGVzOiBzdHJpbmdbXTtcbn0gPSB7XG4gIGV4dGVuc2lvbnM6IFsnLmpzJywgJy5qc3gnLCAnLnRzJywgJy50c3gnXSxcbiAgZXhjbHVkZXM6IFtcbiAgICAvLyBleGNsdWRlIHRlc3RzXG4gICAgJyoqLyouKHNwZWN8dGVzdCkuKGpzfGpzeHx0c3x0c3gpJyxcbiAgICAnKiovX18qJyxcblxuICAgIC8vIGV4Y2x1ZGUgcHVibGljXG4gICAgJyoqL3B1YmxpYycsXG4gICAgJyoqL2JpbicsXG5cbiAgICAvLyBleGNsdWRlIHB1YmxpY1xuICAgICcqKi9wdWJsaWMnLFxuICBdLFxuICBpbmNsdWRlczogWycqKi8qJ10sXG59O1xuXG5pbnRlcmZhY2UgQ29sbGVjdERlcGVuZGVuY2llc1BhcmFtcyB7XG4gIC8vIHNvdXJjZSBkaXJlY3RvcnlcbiAgcm9vdERpcjogc3RyaW5nO1xuICAvLyBkZXBlbmRlbmN5IHJlZmVyZW5jZXNcbiAgaW50ZXJuYWxQYWNrYWdlcz86IE1hcDxzdHJpbmcsIFBhY2thZ2VJbmZvPjtcbiAgZXh0ZXJuYWxQYWNrYWdlczogUGFja2FnZUpzb24uRGVwZW5kZW5jeTtcbiAgLy8gdHlwZXNjcmlwdCBjb25maWdzXG4gIGV4dGVuc2lvbnM/OiBzdHJpbmdbXTtcbiAgZXhjbHVkZXM/OiBzdHJpbmdbXTtcbiAgaW5jbHVkZXM/OiBzdHJpbmdbXTtcbiAgY29tcGlsZXJPcHRpb25zPzogdHMuQ29tcGlsZXJPcHRpb25zO1xuICAvLyBpZiB5b3Ugd2FudCB0byBkbyBub3QgY29sbGVjdCBzb21lIGRlcGVuZGVuY2llcyBsaWtlIHRoaXMgYGltcG9ydCB7fSBmcm9tICdzZWxmLXBhY2thZ2UtbmFtZSdgXG4gIC8vIHlvdSBjYW4gcGFzcyB0aGlzIGxpa2UgeyBzZWxmTmFtZXM6IG5ldyBTZXQoWydzZWxmLXBhY2thZ2UtbmFtZSddKSB9XG4gIHNlbGZOYW1lcz86IFNldDxzdHJpbmc+O1xuICBmaXhJbXBvcnRQYXRoPzogKGFyZ3M6IHsgaW1wb3J0UGF0aDogc3RyaW5nOyBmaWxlUGF0aDogc3RyaW5nIH0pID0+IHN0cmluZztcbiAgLy8gaWYgeW91IHNldCB0aGlzIHRvICdwYXNzJ1xuICAvLyB3aGVuIGZpbmQgdGhlIHVuZGVmaW5lZCBwYWNrYWdlIG5hbWVcbiAgLy8gaXQgZG9lcyBub3QgdGhyb3cgYSBlcnJvclxuICBjaGVja1VuZGVmaW5lZFBhY2thZ2U/OiAnZXJyb3InIHwgJ3Bhc3MnO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29sbGVjdERlcGVuZGVuY2llcyh7XG4gIHJvb3REaXIsXG4gIGludGVybmFsUGFja2FnZXMgPSBuZXcgTWFwKCksXG4gIGV4dGVybmFsUGFja2FnZXMsXG4gIGV4dGVuc2lvbnMgPSBjb2xsZWN0VHlwZVNjcmlwdC5leHRlbnNpb25zLFxuICBleGNsdWRlcyA9IGNvbGxlY3RUeXBlU2NyaXB0LmV4Y2x1ZGVzLFxuICBpbmNsdWRlcyA9IGNvbGxlY3RUeXBlU2NyaXB0LmluY2x1ZGVzLFxuICBjb21waWxlck9wdGlvbnMgPSB7fSxcbiAgc2VsZk5hbWVzID0gbmV3IFNldCgpLFxuICBmaXhJbXBvcnRQYXRoLFxuICBjaGVja1VuZGVmaW5lZFBhY2thZ2UgPSAnZXJyb3InLFxufTogQ29sbGVjdERlcGVuZGVuY2llc1BhcmFtcyk6IFByb21pc2U8UGFja2FnZUpzb24uRGVwZW5kZW5jeT4ge1xuICBjb21waWxlck9wdGlvbnMgPSB7XG4gICAgYWxsb3dKczogZXh0ZW5zaW9ucy5zb21lKChleHQpID0+IC9eLmpzLy50ZXN0KGV4dCkpLFxuICAgIC4uLmNvbXBpbGVyT3B0aW9ucyxcbiAgICByb290RGlyLFxuICB9O1xuXG4gIGNvbnN0IGhvc3Q6IHRzLkNvbXBpbGVySG9zdCA9IHRzLmNyZWF0ZUNvbXBpbGVySG9zdChjb21waWxlck9wdGlvbnMpO1xuXG4gIGNvbnN0IGZpbGVzOiBzdHJpbmdbXSA9IGhvc3QucmVhZERpcmVjdG9yeSEoXG4gICAgcm9vdERpcixcbiAgICBleHRlbnNpb25zLFxuICAgIGV4Y2x1ZGVzLFxuICAgIGluY2x1ZGVzLFxuICApO1xuXG4gIGNvbnN0IHByb2dyYW06IHRzLlByb2dyYW0gPSB0cy5jcmVhdGVQcm9ncmFtKGZpbGVzLCBjb21waWxlck9wdGlvbnMsIGhvc3QpO1xuXG4gIGNvbnN0IGltcG9ydFBhdGhzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgIGNvbnN0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUgfCB1bmRlZmluZWQgPSBwcm9ncmFtLmdldFNvdXJjZUZpbGUoZmlsZSk7XG5cbiAgICBpZiAoIXNvdXJjZUZpbGUpIGNvbnRpbnVlO1xuXG4gICAgZnVuY3Rpb24gc2VhcmNoKG5vZGU6IHRzLk5vZGUpIHtcbiAgICAgIC8vIGltcG9ydCBmcm9tICc/J1xuICAgICAgaWYgKFxuICAgICAgICB0cy5pc0ltcG9ydERlY2xhcmF0aW9uKG5vZGUpICYmXG4gICAgICAgIHRzLmlzU3RyaW5nTGl0ZXJhbExpa2Uobm9kZS5tb2R1bGVTcGVjaWZpZXIpICYmXG4gICAgICAgIG5vZGUubW9kdWxlU3BlY2lmaWVyLnRleHRcbiAgICAgICkge1xuICAgICAgICBjb25zdCBpbXBvcnRQYXRoOiBzdHJpbmcgPSBub2RlLm1vZHVsZVNwZWNpZmllci50ZXh0O1xuICAgICAgICBpbXBvcnRQYXRocy5hZGQoXG4gICAgICAgICAgdHlwZW9mIGZpeEltcG9ydFBhdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gZml4SW1wb3J0UGF0aCh7XG4gICAgICAgICAgICAgICAgaW1wb3J0UGF0aCxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogZmlsZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogaW1wb3J0UGF0aCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIGltcG9ydCgnPycpXG4gICAgICBlbHNlIGlmIChcbiAgICAgICAgdHMuaXNDYWxsRXhwcmVzc2lvbihub2RlKSAmJlxuICAgICAgICBub2RlLmV4cHJlc3Npb24ua2luZCA9PT0gdHMuU3ludGF4S2luZC5JbXBvcnRLZXl3b3JkICYmXG4gICAgICAgIHRzLmlzU3RyaW5nTGl0ZXJhbExpa2Uobm9kZS5hcmd1bWVudHNbMF0pXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgaW1wb3J0UGF0aDogc3RyaW5nID0gKG5vZGUuYXJndW1lbnRzWzBdIGFzIHRzLlN0cmluZ0xpdGVyYWxMaWtlKVxuICAgICAgICAgIC50ZXh0O1xuICAgICAgICBpbXBvcnRQYXRocy5hZGQoXG4gICAgICAgICAgdHlwZW9mIGZpeEltcG9ydFBhdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gZml4SW1wb3J0UGF0aCh7XG4gICAgICAgICAgICAgICAgaW1wb3J0UGF0aCxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogZmlsZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogaW1wb3J0UGF0aCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlcXVpcmUucmVzb2x2ZSgnPycpXG4gICAgICBlbHNlIGlmIChcbiAgICAgICAgdHMuaXNDYWxsRXhwcmVzc2lvbihub2RlKSAmJlxuICAgICAgICB0cy5pc1Byb3BlcnR5QWNjZXNzRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24pICYmXG4gICAgICAgIHRzLmlzSWRlbnRpZmllcihub2RlLmV4cHJlc3Npb24uZXhwcmVzc2lvbikgJiZcbiAgICAgICAgbm9kZS5leHByZXNzaW9uLmV4cHJlc3Npb24uZXNjYXBlZFRleHQgPT09ICdyZXF1aXJlJyAmJlxuICAgICAgICBub2RlLmV4cHJlc3Npb24ubmFtZS5lc2NhcGVkVGV4dCA9PT0gJ3Jlc29sdmUnICYmXG4gICAgICAgIHRzLmlzU3RyaW5nTGl0ZXJhbExpa2Uobm9kZS5hcmd1bWVudHNbMF0pXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgaW1wb3J0UGF0aDogc3RyaW5nID0gKG5vZGUuYXJndW1lbnRzWzBdIGFzIHRzLlN0cmluZ0xpdGVyYWxMaWtlKVxuICAgICAgICAgIC50ZXh0O1xuICAgICAgICBpbXBvcnRQYXRocy5hZGQoXG4gICAgICAgICAgdHlwZW9mIGZpeEltcG9ydFBhdGggPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gZml4SW1wb3J0UGF0aCh7XG4gICAgICAgICAgICAgICAgaW1wb3J0UGF0aCxcbiAgICAgICAgICAgICAgICBmaWxlUGF0aDogZmlsZSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogaW1wb3J0UGF0aCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlcXVpcmUoJz8nKVxuICAgICAgZWxzZSBpZiAoXG4gICAgICAgIHRzLmlzQ2FsbEV4cHJlc3Npb24obm9kZSkgJiZcbiAgICAgICAgdHMuaXNJZGVudGlmaWVyKG5vZGUuZXhwcmVzc2lvbikgJiZcbiAgICAgICAgbm9kZS5leHByZXNzaW9uLmVzY2FwZWRUZXh0ID09PSAncmVxdWlyZScgJiZcbiAgICAgICAgdHMuaXNTdHJpbmdMaXRlcmFsTGlrZShub2RlLmFyZ3VtZW50c1swXSlcbiAgICAgICkge1xuICAgICAgICBjb25zdCBpbXBvcnRQYXRoOiBzdHJpbmcgPSAobm9kZS5hcmd1bWVudHNbMF0gYXMgdHMuU3RyaW5nTGl0ZXJhbExpa2UpXG4gICAgICAgICAgLnRleHQ7XG4gICAgICAgIGltcG9ydFBhdGhzLmFkZChcbiAgICAgICAgICB0eXBlb2YgZml4SW1wb3J0UGF0aCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBmaXhJbXBvcnRQYXRoKHtcbiAgICAgICAgICAgICAgICBpbXBvcnRQYXRoLFxuICAgICAgICAgICAgICAgIGZpbGVQYXRoOiBmaWxlLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBpbXBvcnRQYXRoLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0cy5mb3JFYWNoQ2hpbGQobm9kZSwgc2VhcmNoKTtcbiAgICB9XG5cbiAgICBzZWFyY2goc291cmNlRmlsZSk7XG4gIH1cblxuICBjb25zdCBpbXBvcnRzOiBQYWNrYWdlSnNvbi5EZXBlbmRlbmN5ID0ge307XG5cbiAgZm9yIChjb25zdCBpbXBvcnRQYXRoIG9mIGltcG9ydFBhdGhzKSB7XG4gICAgY29uc3QgcGFja2FnZU5hbWU6IHN0cmluZyA9IC9eQC8udGVzdChpbXBvcnRQYXRoKVxuICAgICAgPyBpbXBvcnRQYXRoLnNwbGl0KCcvJykuc2xpY2UoMCwgMikuam9pbignLycpXG4gICAgICA6IGltcG9ydFBhdGguc3BsaXQoJy8nKVswXTtcblxuICAgIGlmIChcbiAgICAgICFpbXBvcnRzW3BhY2thZ2VOYW1lXSAmJlxuICAgICAgIXNlbGZOYW1lcy5oYXMocGFja2FnZU5hbWUpICYmXG4gICAgICAhL15cXC4vLnRlc3QocGFja2FnZU5hbWUpICYmXG4gICAgICAhbm9kZUFQSUxpc3QuaGFzKHBhY2thZ2VOYW1lKVxuICAgICkge1xuICAgICAgY29uc3QgaW50ZXJuYWxQYWNrYWdlOiBQYWNrYWdlSW5mbyB8IHVuZGVmaW5lZCA9IGludGVybmFsUGFja2FnZXMuZ2V0KFxuICAgICAgICBwYWNrYWdlTmFtZSxcbiAgICAgICk7XG5cbiAgICAgIGlmIChpbnRlcm5hbFBhY2thZ2UpIHtcbiAgICAgICAgaW1wb3J0c1twYWNrYWdlTmFtZV0gPSBgXiR7aW50ZXJuYWxQYWNrYWdlLnZlcnNpb259YDtcbiAgICAgIH0gZWxzZSBpZiAoZXh0ZXJuYWxQYWNrYWdlc1twYWNrYWdlTmFtZV0pIHtcbiAgICAgICAgaW1wb3J0c1twYWNrYWdlTmFtZV0gPSBleHRlcm5hbFBhY2thZ2VzW3BhY2thZ2VOYW1lXTtcbiAgICAgIH0gZWxzZSBpZiAoY2hlY2tVbmRlZmluZWRQYWNrYWdlID09PSAnZXJyb3InKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVW5kZWZpbmVkIHBhY2thZ2UgXCIke3BhY2thZ2VOYW1lfVwiIGZyb20gXCIke2ltcG9ydFBhdGh9XCJgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpbXBvcnRzO1xufVxuIl19