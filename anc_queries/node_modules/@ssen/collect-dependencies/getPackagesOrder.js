import toposort from 'toposort';
function allDependencies(packageJson) {
    if (!packageJson.dependencies &&
        !packageJson.peerDependencies &&
        !packageJson.optionalDependencies) {
        return undefined;
    }
    return {
        ...packageJson.dependencies,
        ...packageJson.peerDependencies,
        ...packageJson.optionalDependencies,
    };
}
export function getPackagesOrder({ packageJsonContents, }) {
    function searchNestedDependencies(ownerName, dependencies, dependenciesSet, parents) {
        if (dependencies) {
            const dependencyNames = Object.keys(dependencies);
            for (const dependencyName of dependencyNames) {
                if (dependencyName === ownerName) {
                    const parentsNames = parents.join(' < ');
                    throw new Error(`package.json files have circularly referenced dependencies : "${ownerName}" in "${parentsNames} < ${dependencyName}"`);
                }
                dependenciesSet.add(dependencyName);
                // find dependencyName on the packageJsonContents
                const childPackageJson = packageJsonContents.find(({ name }) => dependencyName === name);
                // if childPackageJson is exists search childPackageJson's dependencies
                if (childPackageJson && childPackageJson.dependencies) {
                    searchNestedDependencies(ownerName, allDependencies(childPackageJson), dependenciesSet, [...parents, dependencyName]);
                }
            }
        }
        return dependenciesSet;
    }
    const packagesMap = packageJsonContents.reduce((map, packageJson) => {
        if (!packageJson.name) {
            throw new Error(`Undefined "name" field on ${packageJson}`);
        }
        map.set(packageJson.name, {
            name: packageJson.name,
            dependencies: searchNestedDependencies(packageJson.name, allDependencies(packageJson), new Set(), [packageJson.name]),
        });
        return map;
    }, new Map());
    const edges = [];
    for (const [name, { dependencies }] of packagesMap) {
        for (const dep of dependencies) {
            if (packagesMap.has(dep)) {
                edges.push([name, dep]);
            }
        }
    }
    const sorted = toposort(edges).reverse();
    return [
        ...Array.from(packagesMap.values()).filter(({ name }) => !sorted.includes(name)),
        ...sorted.map((name) => {
            return packagesMap.get(name);
        }),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGFja2FnZXNPcmRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9Ac3Nlbi9jb2xsZWN0LWRlcGVuZGVuY2llcy9nZXRQYWNrYWdlc09yZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQVloQyxTQUFTLGVBQWUsQ0FDdEIsV0FBd0I7SUFFeEIsSUFDRSxDQUFDLFdBQVcsQ0FBQyxZQUFZO1FBQ3pCLENBQUMsV0FBVyxDQUFDLGdCQUFnQjtRQUM3QixDQUFDLFdBQVcsQ0FBQyxvQkFBb0IsRUFDakM7UUFDQSxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELE9BQU87UUFDTCxHQUFHLFdBQVcsQ0FBQyxZQUFZO1FBQzNCLEdBQUcsV0FBVyxDQUFDLGdCQUFnQjtRQUMvQixHQUFHLFdBQVcsQ0FBQyxvQkFBb0I7S0FDcEMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsRUFDL0IsbUJBQW1CLEdBQ1o7SUFDUCxTQUFTLHdCQUF3QixDQUMvQixTQUFpQixFQUNqQixZQUFnRCxFQUNoRCxlQUE0QixFQUM1QixPQUFpQjtRQUVqQixJQUFJLFlBQVksRUFBRTtZQUNoQixNQUFNLGVBQWUsR0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRTVELEtBQUssTUFBTSxjQUFjLElBQUksZUFBZSxFQUFFO2dCQUM1QyxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7b0JBQ2hDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQ2IsaUVBQWlFLFNBQVMsU0FBUyxZQUFZLE1BQU0sY0FBYyxHQUFHLENBQ3ZILENBQUM7aUJBQ0g7Z0JBRUQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFFcEMsaURBQWlEO2dCQUNqRCxNQUFNLGdCQUFnQixHQUNwQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUM7Z0JBRWxFLHVFQUF1RTtnQkFDdkUsSUFBSSxnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUU7b0JBQ3JELHdCQUF3QixDQUN0QixTQUFTLEVBQ1QsZUFBZSxDQUFDLGdCQUFnQixDQUFDLEVBQ2pDLGVBQWUsRUFDZixDQUFDLEdBQUcsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUM3QixDQUFDO2lCQUNIO2FBQ0Y7U0FDRjtRQUVELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxNQUFNLFdBQVcsR0FBZ0MsbUJBQW1CLENBQUMsTUFBTSxDQUN6RSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsRUFBRTtRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixXQUFXLEVBQUUsQ0FBQyxDQUFDO1NBQzdEO1FBRUQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1lBQ3hCLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSTtZQUN0QixZQUFZLEVBQUUsd0JBQXdCLENBQ3BDLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFDNUIsSUFBSSxHQUFHLEVBQUUsRUFDVCxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FDbkI7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFDRCxJQUFJLEdBQUcsRUFBMEIsQ0FDbEMsQ0FBQztJQUVGLE1BQU0sS0FBSyxHQUF1QixFQUFFLENBQUM7SUFFckMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsSUFBSSxXQUFXLEVBQUU7UUFDbEQsS0FBSyxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUU7WUFDOUIsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDekI7U0FDRjtLQUNGO0lBRUQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBRXpDLE9BQU87UUFDTCxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUN4QyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FDckM7UUFDRCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdG9wb3NvcnQgZnJvbSAndG9wb3NvcnQnO1xuaW1wb3J0IHsgUGFja2FnZUpzb24gfSBmcm9tICd0eXBlLWZlc3QnO1xuXG5pbnRlcmZhY2UgUGFja2FnZUpzb25TZXQge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlcGVuZGVuY2llczogU2V0PHN0cmluZz47XG59XG5cbmludGVyZmFjZSBQYXJhbXMge1xuICBwYWNrYWdlSnNvbkNvbnRlbnRzOiBQYWNrYWdlSnNvbltdO1xufVxuXG5mdW5jdGlvbiBhbGxEZXBlbmRlbmNpZXMoXG4gIHBhY2thZ2VKc29uOiBQYWNrYWdlSnNvbixcbik6IFBhY2thZ2VKc29uLkRlcGVuZGVuY3kgfCB1bmRlZmluZWQge1xuICBpZiAoXG4gICAgIXBhY2thZ2VKc29uLmRlcGVuZGVuY2llcyAmJlxuICAgICFwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzICYmXG4gICAgIXBhY2thZ2VKc29uLm9wdGlvbmFsRGVwZW5kZW5jaWVzXG4gICkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLnBhY2thZ2VKc29uLmRlcGVuZGVuY2llcyxcbiAgICAuLi5wYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzLFxuICAgIC4uLnBhY2thZ2VKc29uLm9wdGlvbmFsRGVwZW5kZW5jaWVzLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFja2FnZXNPcmRlcih7XG4gIHBhY2thZ2VKc29uQ29udGVudHMsXG59OiBQYXJhbXMpOiBQYWNrYWdlSnNvblNldFtdIHtcbiAgZnVuY3Rpb24gc2VhcmNoTmVzdGVkRGVwZW5kZW5jaWVzKFxuICAgIG93bmVyTmFtZTogc3RyaW5nLFxuICAgIGRlcGVuZGVuY2llczogUGFja2FnZUpzb24uRGVwZW5kZW5jeSB8IHVuZGVmaW5lZCxcbiAgICBkZXBlbmRlbmNpZXNTZXQ6IFNldDxzdHJpbmc+LFxuICAgIHBhcmVudHM6IHN0cmluZ1tdLFxuICApOiBTZXQ8c3RyaW5nPiB7XG4gICAgaWYgKGRlcGVuZGVuY2llcykge1xuICAgICAgY29uc3QgZGVwZW5kZW5jeU5hbWVzOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKGRlcGVuZGVuY2llcyk7XG5cbiAgICAgIGZvciAoY29uc3QgZGVwZW5kZW5jeU5hbWUgb2YgZGVwZW5kZW5jeU5hbWVzKSB7XG4gICAgICAgIGlmIChkZXBlbmRlbmN5TmFtZSA9PT0gb3duZXJOYW1lKSB7XG4gICAgICAgICAgY29uc3QgcGFyZW50c05hbWVzID0gcGFyZW50cy5qb2luKCcgPCAnKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgcGFja2FnZS5qc29uIGZpbGVzIGhhdmUgY2lyY3VsYXJseSByZWZlcmVuY2VkIGRlcGVuZGVuY2llcyA6IFwiJHtvd25lck5hbWV9XCIgaW4gXCIke3BhcmVudHNOYW1lc30gPCAke2RlcGVuZGVuY3lOYW1lfVwiYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVwZW5kZW5jaWVzU2V0LmFkZChkZXBlbmRlbmN5TmFtZSk7XG5cbiAgICAgICAgLy8gZmluZCBkZXBlbmRlbmN5TmFtZSBvbiB0aGUgcGFja2FnZUpzb25Db250ZW50c1xuICAgICAgICBjb25zdCBjaGlsZFBhY2thZ2VKc29uOiBQYWNrYWdlSnNvbiB8IHVuZGVmaW5lZCA9XG4gICAgICAgICAgcGFja2FnZUpzb25Db250ZW50cy5maW5kKCh7IG5hbWUgfSkgPT4gZGVwZW5kZW5jeU5hbWUgPT09IG5hbWUpO1xuXG4gICAgICAgIC8vIGlmIGNoaWxkUGFja2FnZUpzb24gaXMgZXhpc3RzIHNlYXJjaCBjaGlsZFBhY2thZ2VKc29uJ3MgZGVwZW5kZW5jaWVzXG4gICAgICAgIGlmIChjaGlsZFBhY2thZ2VKc29uICYmIGNoaWxkUGFja2FnZUpzb24uZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgc2VhcmNoTmVzdGVkRGVwZW5kZW5jaWVzKFxuICAgICAgICAgICAgb3duZXJOYW1lLFxuICAgICAgICAgICAgYWxsRGVwZW5kZW5jaWVzKGNoaWxkUGFja2FnZUpzb24pLFxuICAgICAgICAgICAgZGVwZW5kZW5jaWVzU2V0LFxuICAgICAgICAgICAgWy4uLnBhcmVudHMsIGRlcGVuZGVuY3lOYW1lXSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlcGVuZGVuY2llc1NldDtcbiAgfVxuXG4gIGNvbnN0IHBhY2thZ2VzTWFwOiBNYXA8c3RyaW5nLCBQYWNrYWdlSnNvblNldD4gPSBwYWNrYWdlSnNvbkNvbnRlbnRzLnJlZHVjZShcbiAgICAobWFwLCBwYWNrYWdlSnNvbikgPT4ge1xuICAgICAgaWYgKCFwYWNrYWdlSnNvbi5uYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5kZWZpbmVkIFwibmFtZVwiIGZpZWxkIG9uICR7cGFja2FnZUpzb259YCk7XG4gICAgICB9XG5cbiAgICAgIG1hcC5zZXQocGFja2FnZUpzb24ubmFtZSwge1xuICAgICAgICBuYW1lOiBwYWNrYWdlSnNvbi5uYW1lLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IHNlYXJjaE5lc3RlZERlcGVuZGVuY2llcyhcbiAgICAgICAgICBwYWNrYWdlSnNvbi5uYW1lLFxuICAgICAgICAgIGFsbERlcGVuZGVuY2llcyhwYWNrYWdlSnNvbiksXG4gICAgICAgICAgbmV3IFNldCgpLFxuICAgICAgICAgIFtwYWNrYWdlSnNvbi5uYW1lXSxcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0sXG4gICAgbmV3IE1hcDxzdHJpbmcsIFBhY2thZ2VKc29uU2V0PigpLFxuICApO1xuXG4gIGNvbnN0IGVkZ2VzOiBbc3RyaW5nLCBzdHJpbmddW10gPSBbXTtcblxuICBmb3IgKGNvbnN0IFtuYW1lLCB7IGRlcGVuZGVuY2llcyB9XSBvZiBwYWNrYWdlc01hcCkge1xuICAgIGZvciAoY29uc3QgZGVwIG9mIGRlcGVuZGVuY2llcykge1xuICAgICAgaWYgKHBhY2thZ2VzTWFwLmhhcyhkZXApKSB7XG4gICAgICAgIGVkZ2VzLnB1c2goW25hbWUsIGRlcF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNvcnRlZCA9IHRvcG9zb3J0KGVkZ2VzKS5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIFtcbiAgICAuLi5BcnJheS5mcm9tKHBhY2thZ2VzTWFwLnZhbHVlcygpKS5maWx0ZXIoXG4gICAgICAoeyBuYW1lIH0pID0+ICFzb3J0ZWQuaW5jbHVkZXMobmFtZSksXG4gICAgKSxcbiAgICAuLi5zb3J0ZWQubWFwKChuYW1lKSA9PiB7XG4gICAgICByZXR1cm4gcGFja2FnZXNNYXAuZ2V0KG5hbWUpITtcbiAgICB9KSxcbiAgXTtcbn1cbiJdfQ==