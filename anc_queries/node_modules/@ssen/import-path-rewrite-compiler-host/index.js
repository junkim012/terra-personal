import { importPathRewrite } from '@ssen/import-path-rewrite';
import ts from 'typescript';
export const createImportPathRewriteCompilerHost = ({ src, rootDir, }) => (options, setParentNodes, compilerHost = ts.createCompilerHost(options, setParentNodes)) => {
    // wrap getSourceFile
    function getSourceFile(fileName, languageVersion, onError, shouldCreateNewSourceFile) {
        // get origin compiler host result
        const sourceFile = compilerHost.getSourceFile(fileName, languageVersion, onError, shouldCreateNewSourceFile);
        return sourceFile
            ? // if fileName starts with rootDir
                // for example, "/project/root/src/<package>/file.ts" starts with "/project/root/src/<package>"
                fileName.replace(/\\/g, '/').indexOf(rootDir.replace(/\\/g, '/')) > -1
                    ? // transform import paths in import, import(), require() and require.resolve() files
                        ts.transform(sourceFile, [importPathRewrite({ src, fileName })], options).transformed[0]
                    : sourceFile
            : undefined;
    }
    // create wrapped compiler host
    return {
        ...compilerHost,
        getSourceFile,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvQHNzZW4vaW1wb3J0LXBhdGgtcmV3cml0ZS1jb21waWxlci1ob3N0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQWtCNUIsTUFBTSxDQUFDLE1BQU0sbUNBQW1DLEdBQUcsQ0FBQyxFQUNsRCxHQUFHLEVBQ0gsT0FBTyxHQUNPLEVBQUUsRUFBRSxDQUFDLENBQ25CLE9BQTJCLEVBQzNCLGNBQXdCLEVBQ3hCLGVBQWdDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FDbkQsT0FBTyxFQUNQLGNBQWMsQ0FDZixFQUNnQixFQUFFO0lBQ25CLHFCQUFxQjtJQUNyQixTQUFTLGFBQWEsQ0FDcEIsUUFBZ0IsRUFDaEIsZUFBZ0MsRUFDaEMsT0FBbUMsRUFDbkMseUJBQW1DO1FBRW5DLGtDQUFrQztRQUNsQyxNQUFNLFVBQVUsR0FBOEIsWUFBWSxDQUFDLGFBQWEsQ0FDdEUsUUFBUSxFQUNSLGVBQWUsRUFDZixPQUFPLEVBQ1AseUJBQXlCLENBQzFCLENBQUM7UUFFRixPQUFPLFVBQVU7WUFDZixDQUFDLENBQUMsa0NBQWtDO2dCQUNsQywrRkFBK0Y7Z0JBQy9GLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdEUsQ0FBQyxDQUFDLG9GQUFvRjt3QkFDcEYsRUFBRSxDQUFDLFNBQVMsQ0FDVixVQUFVLEVBQ1YsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQ3RDLE9BQU8sQ0FDUixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLENBQUMsQ0FBQyxVQUFVO1lBQ2QsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNoQixDQUFDO0lBRUQsK0JBQStCO0lBQy9CLE9BQU87UUFDTCxHQUFHLFlBQVk7UUFDZixhQUFhO0tBQ2QsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGltcG9ydFBhdGhSZXdyaXRlIH0gZnJvbSAnQHNzZW4vaW1wb3J0LXBhdGgtcmV3cml0ZSc7XG5pbXBvcnQgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmludGVyZmFjZSBDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIHNvdXJjZSByb290XG4gICAqXG4gICAqIC9wcm9qZWN0L3Jvb3Qvc3JjXG4gICAqL1xuICBzcmM6IHN0cmluZztcblxuICAvKipcbiAgICogcGFja2FnZSBzb3VyY2UgZGlyZWN0b3J5XG4gICAqXG4gICAqIC9wcm9qZWN0L3Jvb3Qvc3JjLzxwYWNrYWdlPlxuICAgKi9cbiAgcm9vdERpcjogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlSW1wb3J0UGF0aFJld3JpdGVDb21waWxlckhvc3QgPSAoe1xuICBzcmMsXG4gIHJvb3REaXIsXG59OiBDb25maWd1cmF0aW9uKSA9PiAoXG4gIG9wdGlvbnM6IHRzLkNvbXBpbGVyT3B0aW9ucyxcbiAgc2V0UGFyZW50Tm9kZXM/OiBib29sZWFuLFxuICBjb21waWxlckhvc3Q6IHRzLkNvbXBpbGVySG9zdCA9IHRzLmNyZWF0ZUNvbXBpbGVySG9zdChcbiAgICBvcHRpb25zLFxuICAgIHNldFBhcmVudE5vZGVzLFxuICApLFxuKTogdHMuQ29tcGlsZXJIb3N0ID0+IHtcbiAgLy8gd3JhcCBnZXRTb3VyY2VGaWxlXG4gIGZ1bmN0aW9uIGdldFNvdXJjZUZpbGUoXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICBsYW5ndWFnZVZlcnNpb246IHRzLlNjcmlwdFRhcmdldCxcbiAgICBvbkVycm9yPzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZCxcbiAgICBzaG91bGRDcmVhdGVOZXdTb3VyY2VGaWxlPzogYm9vbGVhbixcbiAgKTogdHMuU291cmNlRmlsZSB8IHVuZGVmaW5lZCB7XG4gICAgLy8gZ2V0IG9yaWdpbiBjb21waWxlciBob3N0IHJlc3VsdFxuICAgIGNvbnN0IHNvdXJjZUZpbGU6IHRzLlNvdXJjZUZpbGUgfCB1bmRlZmluZWQgPSBjb21waWxlckhvc3QuZ2V0U291cmNlRmlsZShcbiAgICAgIGZpbGVOYW1lLFxuICAgICAgbGFuZ3VhZ2VWZXJzaW9uLFxuICAgICAgb25FcnJvcixcbiAgICAgIHNob3VsZENyZWF0ZU5ld1NvdXJjZUZpbGUsXG4gICAgKTtcblxuICAgIHJldHVybiBzb3VyY2VGaWxlXG4gICAgICA/IC8vIGlmIGZpbGVOYW1lIHN0YXJ0cyB3aXRoIHJvb3REaXJcbiAgICAgICAgLy8gZm9yIGV4YW1wbGUsIFwiL3Byb2plY3Qvcm9vdC9zcmMvPHBhY2thZ2U+L2ZpbGUudHNcIiBzdGFydHMgd2l0aCBcIi9wcm9qZWN0L3Jvb3Qvc3JjLzxwYWNrYWdlPlwiXG4gICAgICAgIGZpbGVOYW1lLnJlcGxhY2UoL1xcXFwvZywgJy8nKS5pbmRleE9mKHJvb3REaXIucmVwbGFjZSgvXFxcXC9nLCAnLycpKSA+IC0xXG4gICAgICAgID8gLy8gdHJhbnNmb3JtIGltcG9ydCBwYXRocyBpbiBpbXBvcnQsIGltcG9ydCgpLCByZXF1aXJlKCkgYW5kIHJlcXVpcmUucmVzb2x2ZSgpIGZpbGVzXG4gICAgICAgICAgdHMudHJhbnNmb3JtKFxuICAgICAgICAgICAgc291cmNlRmlsZSxcbiAgICAgICAgICAgIFtpbXBvcnRQYXRoUmV3cml0ZSh7IHNyYywgZmlsZU5hbWUgfSldLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICApLnRyYW5zZm9ybWVkWzBdXG4gICAgICAgIDogc291cmNlRmlsZVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBjcmVhdGUgd3JhcHBlZCBjb21waWxlciBob3N0XG4gIHJldHVybiB7XG4gICAgLi4uY29tcGlsZXJIb3N0LFxuICAgIGdldFNvdXJjZUZpbGUsXG4gIH07XG59O1xuIl19