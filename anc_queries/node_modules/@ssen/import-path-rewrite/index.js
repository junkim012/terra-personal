import { rewriteSrcPath } from '@ssen/rewrite-src-path';
import ts from 'typescript';
function createVisitor({ src, ctx, fileName, }) {
    const visitor = (node) => {
        // import from '?'
        if (ts.isImportDeclaration(node) &&
            ts.isStringLiteralLike(node.moduleSpecifier) &&
            node.moduleSpecifier.text) {
            const importPath = node.moduleSpecifier.text;
            const rewrittenImportPath = rewriteSrcPath({
                importPath,
                filePath: fileName || node.getSourceFile().fileName,
                rootDir: src,
            });
            if (importPath !== rewrittenImportPath) {
                return ts.factory.updateImportDeclaration(node, node.decorators, node.modifiers, node.importClause, ts.factory.createStringLiteral(rewrittenImportPath));
            }
        }
        // import('?')
        else if (ts.isCallExpression(node) &&
            node.expression.kind === ts.SyntaxKind.ImportKeyword &&
            ts.isStringLiteralLike(node.arguments[0])) {
            const importPath = node.arguments[0]
                .text;
            const rewrittenImportPath = rewriteSrcPath({
                importPath,
                filePath: fileName || node.getSourceFile().fileName,
                rootDir: src,
            });
            if (importPath !== rewrittenImportPath) {
                return ts.factory.updateCallExpression(node, node.expression, node.typeArguments, [
                    ts.factory.createStringLiteral(rewrittenImportPath),
                    ...node.arguments.slice(1),
                ]);
            }
        }
        // require.resolve('?')
        else if (ts.isCallExpression(node) &&
            ts.isPropertyAccessExpression(node.expression) &&
            ts.isIdentifier(node.expression.expression) &&
            node.expression.expression.escapedText === 'require' &&
            node.expression.name.escapedText === 'resolve' &&
            ts.isStringLiteralLike(node.arguments[0])) {
            const importPath = node.arguments[0]
                .text;
            const rewrittenImportPath = rewriteSrcPath({
                importPath,
                filePath: fileName || node.getSourceFile().fileName,
                rootDir: src,
            });
            if (importPath !== rewrittenImportPath) {
                return ts.factory.updateCallExpression(node, node.expression, node.typeArguments, [
                    ts.factory.createStringLiteral(rewrittenImportPath),
                    ...node.arguments.slice(1),
                ]);
            }
        }
        // require('?')
        else if (ts.isCallExpression(node) &&
            ts.isIdentifier(node.expression) &&
            node.expression.escapedText === 'require' &&
            ts.isStringLiteralLike(node.arguments[0])) {
            const importPath = node.arguments[0]
                .text;
            const rewrittenImportPath = rewriteSrcPath({
                importPath,
                filePath: fileName || node.getSourceFile().fileName,
                rootDir: src,
            });
            if (importPath !== rewrittenImportPath) {
                return ts.factory.updateCallExpression(node, node.expression, node.typeArguments, [
                    ts.factory.createStringLiteral(rewrittenImportPath),
                    ...node.arguments.slice(1),
                ]);
            }
        }
        return ts.visitEachChild(node, visitor, ctx);
    };
    return visitor;
}
export const importPathRewrite = (config) => (ctx) => (node) => {
    return ts.visitNode(node, createVisitor({ ...config, ctx }));
};
//# sourceMappingURL=data:application/json;base64,