"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublishOptions = void 0;
const flat_package_name_1 = require("@ssen/flat-package-name");
const fs_extra_1 = __importDefault(require("fs-extra"));
const package_json_1 = __importDefault(require("package-json"));
const path_1 = __importDefault(require("path"));
const getNpmRemotePackageJson = ({ name, ...options }) => {
    return package_json_1.default(name, options)
        .then((value) => value && typeof value.version === 'string'
        ? value
        : undefined)
        .catch(() => undefined);
};
async function getPublishOptions({ packages, outDir, tag: forceTag, registry: forceRegistry, getRemotePackageJson = getNpmRemotePackageJson, }) {
    if (!fs_extra_1.default.existsSync(outDir) || !fs_extra_1.default.statSync(outDir).isDirectory()) {
        throw new Error(`"${outDir}" directory is not exists`);
    }
    const tags = new Map();
    for (const [name, { tag }] of packages) {
        tags.set(name, tag !== null && tag !== void 0 ? tag : 'latest');
    }
    const currentPackageJsons = Array.from(packages.values())
        // PackageInfo => /path/to/dist/{name}/package.json
        .map(({ name: packageName }) => path_1.default.join(outDir, flat_package_name_1.flatPackageName(packageName), 'package.json'))
        // /path/to/dist/{name}/package.json => boolean
        .filter((packageJsonFile) => fs_extra_1.default.existsSync(packageJsonFile))
        // /path/to/dist/{name}/package.json => PackageJson
        .map((packageJsonFile) => fs_extra_1.default.readJsonSync(packageJsonFile))
        // PackageJson => boolean
        .filter(({ name }) => typeof name === 'string');
    const remotePackageJsons = await Promise.all(currentPackageJsons.map(({ name }) => {
        if (!name)
            throw new Error(``);
        return getRemotePackageJson({
            name,
            version: forceTag || tags.get(name),
            registryUrl: forceRegistry,
            fullMetadata: true,
        });
    }));
    return currentPackageJsons.reduce((map, current, i) => {
        if (!current || !current.name) {
            throw new Error(``);
        }
        map.set(current.name, {
            name: current.name,
            tag: tags.get(current.name),
            current,
            remote: remotePackageJsons[i],
        });
        return map;
    }, new Map());
}
exports.getPublishOptions = getPublishOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHVibGlzaE9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHNzZW4vcHVibGlzaC1wYWNrYWdlcy9nZXRQdWJsaXNoT3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrREFBMEQ7QUFDMUQsd0RBQTBCO0FBQzFCLGdFQUF1RDtBQUN2RCxnREFBd0I7QUFReEIsTUFBTSx1QkFBdUIsR0FBeUIsQ0FBQyxFQUNyRCxJQUFJLEVBQ0osR0FBRyxPQUFPLEVBQ1gsRUFBRSxFQUFFO0lBQ0gsT0FBTyxzQkFBYyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDakMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDZCxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVE7UUFDeEMsQ0FBQyxDQUFFLEtBQXFCO1FBQ3hCLENBQUMsQ0FBQyxTQUFTLENBQ2Q7U0FDQSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBVUssS0FBSyxVQUFVLGlCQUFpQixDQUFDLEVBQ3RDLFFBQVEsRUFDUixNQUFNLEVBQ04sR0FBRyxFQUFFLFFBQVEsRUFDYixRQUFRLEVBQUUsYUFBYSxFQUN2QixvQkFBb0IsR0FBRyx1QkFBdUIsR0FDdkM7SUFDUCxJQUFJLENBQUMsa0JBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksTUFBTSwyQkFBMkIsQ0FBQyxDQUFDO0tBQ3hEO0lBRUQsTUFBTSxJQUFJLEdBQXdCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDNUMsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxRQUFRLEVBQUU7UUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxhQUFILEdBQUcsY0FBSCxHQUFHLEdBQUksUUFBUSxDQUFDLENBQUM7S0FDakM7SUFFRCxNQUFNLG1CQUFtQixHQUFrQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN0RSxtREFBbUQ7U0FDbEQsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUM3QixjQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxtQ0FBZSxDQUFDLFdBQVcsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUNoRTtRQUNELCtDQUErQztTQUM5QyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLGtCQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVELG1EQUFtRDtTQUNsRCxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLGtCQUFFLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzNELHlCQUF5QjtTQUN4QixNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQztJQUVsRCxNQUFNLGtCQUFrQixHQUFnQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBR3ZFLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtRQUNuQyxJQUFJLENBQUMsSUFBSTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFL0IsT0FBTyxvQkFBb0IsQ0FBQztZQUMxQixJQUFJO1lBQ0osT0FBTyxFQUFFLFFBQVEsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNuQyxXQUFXLEVBQUUsYUFBYTtZQUMxQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBRUYsT0FBTyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckI7UUFFRCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDcEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1lBQ2xCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUU7WUFDNUIsT0FBTztZQUNQLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7U0FDOUIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQXlCLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBekRELDhDQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZsYXRQYWNrYWdlTmFtZSB9IGZyb20gJ0Bzc2VuL2ZsYXQtcGFja2FnZS1uYW1lJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgZ2V0UGFja2FnZUpzb24sIHsgT3B0aW9ucyB9IGZyb20gJ3BhY2thZ2UtanNvbic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFBhY2thZ2VKc29uIH0gZnJvbSAndHlwZS1mZXN0JztcbmltcG9ydCB7IFBhY2thZ2VJbmZvLCBQdWJsaXNoT3B0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIEdldFJlbW90ZVBhY2thZ2VKc29uID0gKFxuICBwYXJhbXM6IHsgbmFtZTogc3RyaW5nIH0gJiBPcHRpb25zLFxuKSA9PiBQcm9taXNlPFBhY2thZ2VKc29uIHwgdW5kZWZpbmVkPjtcblxuY29uc3QgZ2V0TnBtUmVtb3RlUGFja2FnZUpzb246IEdldFJlbW90ZVBhY2thZ2VKc29uID0gKHtcbiAgbmFtZSxcbiAgLi4ub3B0aW9uc1xufSkgPT4ge1xuICByZXR1cm4gZ2V0UGFja2FnZUpzb24obmFtZSwgb3B0aW9ucylcbiAgICAudGhlbigodmFsdWUpID0+XG4gICAgICB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudmVyc2lvbiA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAodmFsdWUgYXMgUGFja2FnZUpzb24pXG4gICAgICAgIDogdW5kZWZpbmVkLFxuICAgIClcbiAgICAuY2F0Y2goKCkgPT4gdW5kZWZpbmVkKTtcbn07XG5cbmludGVyZmFjZSBQYXJhbXMge1xuICBwYWNrYWdlczogTWFwPHN0cmluZywgUGFja2FnZUluZm8+O1xuICBvdXREaXI6IHN0cmluZztcbiAgdGFnOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHJlZ2lzdHJ5OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGdldFJlbW90ZVBhY2thZ2VKc29uPzogR2V0UmVtb3RlUGFja2FnZUpzb247XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQdWJsaXNoT3B0aW9ucyh7XG4gIHBhY2thZ2VzLFxuICBvdXREaXIsXG4gIHRhZzogZm9yY2VUYWcsXG4gIHJlZ2lzdHJ5OiBmb3JjZVJlZ2lzdHJ5LFxuICBnZXRSZW1vdGVQYWNrYWdlSnNvbiA9IGdldE5wbVJlbW90ZVBhY2thZ2VKc29uLFxufTogUGFyYW1zKTogUHJvbWlzZTxNYXA8c3RyaW5nLCBQdWJsaXNoT3B0aW9uPj4ge1xuICBpZiAoIWZzLmV4aXN0c1N5bmMob3V0RGlyKSB8fCAhZnMuc3RhdFN5bmMob3V0RGlyKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7b3V0RGlyfVwiIGRpcmVjdG9yeSBpcyBub3QgZXhpc3RzYCk7XG4gIH1cblxuICBjb25zdCB0YWdzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IFtuYW1lLCB7IHRhZyB9XSBvZiBwYWNrYWdlcykge1xuICAgIHRhZ3Muc2V0KG5hbWUsIHRhZyA/PyAnbGF0ZXN0Jyk7XG4gIH1cblxuICBjb25zdCBjdXJyZW50UGFja2FnZUpzb25zOiBQYWNrYWdlSnNvbltdID0gQXJyYXkuZnJvbShwYWNrYWdlcy52YWx1ZXMoKSlcbiAgICAvLyBQYWNrYWdlSW5mbyA9PiAvcGF0aC90by9kaXN0L3tuYW1lfS9wYWNrYWdlLmpzb25cbiAgICAubWFwKCh7IG5hbWU6IHBhY2thZ2VOYW1lIH0pID0+XG4gICAgICBwYXRoLmpvaW4ob3V0RGlyLCBmbGF0UGFja2FnZU5hbWUocGFja2FnZU5hbWUpLCAncGFja2FnZS5qc29uJyksXG4gICAgKVxuICAgIC8vIC9wYXRoL3RvL2Rpc3Qve25hbWV9L3BhY2thZ2UuanNvbiA9PiBib29sZWFuXG4gICAgLmZpbHRlcigocGFja2FnZUpzb25GaWxlKSA9PiBmcy5leGlzdHNTeW5jKHBhY2thZ2VKc29uRmlsZSkpXG4gICAgLy8gL3BhdGgvdG8vZGlzdC97bmFtZX0vcGFja2FnZS5qc29uID0+IFBhY2thZ2VKc29uXG4gICAgLm1hcCgocGFja2FnZUpzb25GaWxlKSA9PiBmcy5yZWFkSnNvblN5bmMocGFja2FnZUpzb25GaWxlKSlcbiAgICAvLyBQYWNrYWdlSnNvbiA9PiBib29sZWFuXG4gICAgLmZpbHRlcigoeyBuYW1lIH0pID0+IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyk7XG5cbiAgY29uc3QgcmVtb3RlUGFja2FnZUpzb25zOiAoUGFja2FnZUpzb24gfCB1bmRlZmluZWQpW10gPSBhd2FpdCBQcm9taXNlLmFsbDxcbiAgICBQYWNrYWdlSnNvbiB8IHVuZGVmaW5lZFxuICA+KFxuICAgIGN1cnJlbnRQYWNrYWdlSnNvbnMubWFwKCh7IG5hbWUgfSkgPT4ge1xuICAgICAgaWYgKCFuYW1lKSB0aHJvdyBuZXcgRXJyb3IoYGApO1xuXG4gICAgICByZXR1cm4gZ2V0UmVtb3RlUGFja2FnZUpzb24oe1xuICAgICAgICBuYW1lLFxuICAgICAgICB2ZXJzaW9uOiBmb3JjZVRhZyB8fCB0YWdzLmdldChuYW1lKSxcbiAgICAgICAgcmVnaXN0cnlVcmw6IGZvcmNlUmVnaXN0cnksXG4gICAgICAgIGZ1bGxNZXRhZGF0YTogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pLFxuICApO1xuXG4gIHJldHVybiBjdXJyZW50UGFja2FnZUpzb25zLnJlZHVjZSgobWFwLCBjdXJyZW50LCBpKSA9PiB7XG4gICAgaWYgKCFjdXJyZW50IHx8ICFjdXJyZW50Lm5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgYCk7XG4gICAgfVxuXG4gICAgbWFwLnNldChjdXJyZW50Lm5hbWUsIHtcbiAgICAgIG5hbWU6IGN1cnJlbnQubmFtZSxcbiAgICAgIHRhZzogdGFncy5nZXQoY3VycmVudC5uYW1lKSEsXG4gICAgICBjdXJyZW50LFxuICAgICAgcmVtb3RlOiByZW1vdGVQYWNrYWdlSnNvbnNbaV0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWFwO1xuICB9LCBuZXcgTWFwPHN0cmluZywgUHVibGlzaE9wdGlvbj4oKSk7XG59XG4iXX0=