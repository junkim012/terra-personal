"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectPublishOptions = exports.getVersions = void 0;
const prompts_1 = __importDefault(require("prompts"));
const semver_1 = __importDefault(require("semver"));
function getVersions({ current, remote }) {
    const currentVersion = current.version;
    const remoteVersion = remote && typeof remote.version === 'string' ? remote.version : undefined;
    return { currentVersion, remoteVersion };
}
exports.getVersions = getVersions;
async function selectPublishOptions({ publishOptions, skipSelection, }) {
    const availablePublishOptions = Array.from(publishOptions.values())
        .map((publishOption) => ({
        ...publishOption,
        ...getVersions(publishOption),
    }))
        .filter(({ currentVersion, remoteVersion }) => !remoteVersion || semver_1.default.gt(currentVersion, remoteVersion));
    if (availablePublishOptions.length === 0) {
        return [];
    }
    else if (skipSelection) {
        return availablePublishOptions;
    }
    else {
        const answer = await prompts_1.default({
            type: 'multiselect',
            name: 'publishOptions',
            message: 'Select packages to publish',
            choices: availablePublishOptions.map(({ name, tag, currentVersion, remoteVersion }) => {
                return {
                    title: remoteVersion
                        ? `${name}@${tag} (${remoteVersion} → ${currentVersion})`
                        : `${name}@${tag} (→ ${currentVersion})`,
                    value: name,
                    disabled: remoteVersion && semver_1.default.lte(currentVersion, remoteVersion),
                };
            }),
        });
        const filter = new Set(answer.publishOptions);
        return Array.from(availablePublishOptions.values()).filter((publishOption) => filter.has(publishOption.name));
    }
}
exports.selectPublishOptions = selectPublishOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0UHVibGlzaE9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHNzZW4vcHVibGlzaC1wYWNrYWdlcy9zZWxlY3RQdWJsaXNoT3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzREFBMkM7QUFDM0Msb0RBQTRCO0FBVTVCLFNBQWdCLFdBQVcsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQWlCO0lBQzVELE1BQU0sY0FBYyxHQUFXLE9BQU8sQ0FBQyxPQUFRLENBQUM7SUFDaEQsTUFBTSxhQUFhLEdBQ2pCLE1BQU0sSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDNUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsQ0FBQztBQUMzQyxDQUFDO0FBTEQsa0NBS0M7QUFPTSxLQUFLLFVBQVUsb0JBQW9CLENBQUMsRUFDekMsY0FBYyxFQUNkLGFBQWEsR0FDTjtJQUNQLE1BQU0sdUJBQXVCLEdBQW9DLEtBQUssQ0FBQyxJQUFJLENBQ3pFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FDeEI7U0FDRSxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsR0FBRyxhQUFhO1FBQ2hCLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQztLQUM5QixDQUFDLENBQUM7U0FDRixNQUFNLENBQ0wsQ0FBQyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQ3BDLENBQUMsYUFBYSxJQUFJLGdCQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FDN0QsQ0FBQztJQUVKLElBQUksdUJBQXVCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUN4QyxPQUFPLEVBQUUsQ0FBQztLQUNYO1NBQU0sSUFBSSxhQUFhLEVBQUU7UUFDeEIsT0FBTyx1QkFBdUIsQ0FBQztLQUNoQztTQUFNO1FBQ0wsTUFBTSxNQUFNLEdBQThCLE1BQU0saUJBQU8sQ0FBbUI7WUFDeEUsSUFBSSxFQUFFLGFBQWE7WUFDbkIsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixPQUFPLEVBQUUsNEJBQTRCO1lBQ3JDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQyxHQUFHLENBQ2xDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO2dCQUMvQyxPQUFPO29CQUNMLEtBQUssRUFBRSxhQUFhO3dCQUNsQixDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRyxLQUFLLGFBQWEsTUFBTSxjQUFjLEdBQUc7d0JBQ3pELENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxHQUFHLE9BQU8sY0FBYyxHQUFHO29CQUMxQyxLQUFLLEVBQUUsSUFBSTtvQkFDWCxRQUFRLEVBQ04sYUFBYSxJQUFJLGdCQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUM7aUJBQzdELENBQUM7WUFDSixDQUFDLENBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBZ0IsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FDZix1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsQ0FDakMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDN0Q7QUFDSCxDQUFDO0FBN0NELG9EQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcm9tcHRzLCB7IEFuc3dlcnMgfSBmcm9tICdwcm9tcHRzJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCB7IFB1Ymxpc2hPcHRpb24gfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIFZlcnNpb25JbmZvIHtcbiAgY3VycmVudFZlcnNpb246IHN0cmluZztcbiAgcmVtb3RlVmVyc2lvbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBBdmFpbGFibGVQdWJsaXNoT3B0aW9uID0gUHVibGlzaE9wdGlvbiAmIFZlcnNpb25JbmZvO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmVyc2lvbnMoeyBjdXJyZW50LCByZW1vdGUgfTogUHVibGlzaE9wdGlvbik6IFZlcnNpb25JbmZvIHtcbiAgY29uc3QgY3VycmVudFZlcnNpb246IHN0cmluZyA9IGN1cnJlbnQudmVyc2lvbiE7XG4gIGNvbnN0IHJlbW90ZVZlcnNpb246IHN0cmluZyB8IHVuZGVmaW5lZCA9XG4gICAgcmVtb3RlICYmIHR5cGVvZiByZW1vdGUudmVyc2lvbiA9PT0gJ3N0cmluZycgPyByZW1vdGUudmVyc2lvbiA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHsgY3VycmVudFZlcnNpb24sIHJlbW90ZVZlcnNpb24gfTtcbn1cblxuaW50ZXJmYWNlIFBhcmFtcyB7XG4gIHB1Ymxpc2hPcHRpb25zOiBNYXA8c3RyaW5nLCBQdWJsaXNoT3B0aW9uPjtcbiAgc2tpcFNlbGVjdGlvbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbGVjdFB1Ymxpc2hPcHRpb25zKHtcbiAgcHVibGlzaE9wdGlvbnMsXG4gIHNraXBTZWxlY3Rpb24sXG59OiBQYXJhbXMpOiBQcm9taXNlPEF2YWlsYWJsZVB1Ymxpc2hPcHRpb25bXT4ge1xuICBjb25zdCBhdmFpbGFibGVQdWJsaXNoT3B0aW9uczogKFB1Ymxpc2hPcHRpb24gJiBWZXJzaW9uSW5mbylbXSA9IEFycmF5LmZyb20oXG4gICAgcHVibGlzaE9wdGlvbnMudmFsdWVzKCksXG4gIClcbiAgICAubWFwKChwdWJsaXNoT3B0aW9uKSA9PiAoe1xuICAgICAgLi4ucHVibGlzaE9wdGlvbixcbiAgICAgIC4uLmdldFZlcnNpb25zKHB1Ymxpc2hPcHRpb24pLFxuICAgIH0pKVxuICAgIC5maWx0ZXIoXG4gICAgICAoeyBjdXJyZW50VmVyc2lvbiwgcmVtb3RlVmVyc2lvbiB9KSA9PlxuICAgICAgICAhcmVtb3RlVmVyc2lvbiB8fCBzZW12ZXIuZ3QoY3VycmVudFZlcnNpb24sIHJlbW90ZVZlcnNpb24pLFxuICAgICk7XG5cbiAgaWYgKGF2YWlsYWJsZVB1Ymxpc2hPcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfSBlbHNlIGlmIChza2lwU2VsZWN0aW9uKSB7XG4gICAgcmV0dXJuIGF2YWlsYWJsZVB1Ymxpc2hPcHRpb25zO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFuc3dlcjogQW5zd2VyczwncHVibGlzaE9wdGlvbnMnPiA9IGF3YWl0IHByb21wdHM8J3B1Ymxpc2hPcHRpb25zJz4oe1xuICAgICAgdHlwZTogJ211bHRpc2VsZWN0JyxcbiAgICAgIG5hbWU6ICdwdWJsaXNoT3B0aW9ucycsXG4gICAgICBtZXNzYWdlOiAnU2VsZWN0IHBhY2thZ2VzIHRvIHB1Ymxpc2gnLFxuICAgICAgY2hvaWNlczogYXZhaWxhYmxlUHVibGlzaE9wdGlvbnMubWFwKFxuICAgICAgICAoeyBuYW1lLCB0YWcsIGN1cnJlbnRWZXJzaW9uLCByZW1vdGVWZXJzaW9uIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGU6IHJlbW90ZVZlcnNpb25cbiAgICAgICAgICAgICAgPyBgJHtuYW1lfUAke3RhZ30gKCR7cmVtb3RlVmVyc2lvbn0g4oaSICR7Y3VycmVudFZlcnNpb259KWBcbiAgICAgICAgICAgICAgOiBgJHtuYW1lfUAke3RhZ30gKOKGkiAke2N1cnJlbnRWZXJzaW9ufSlgLFxuICAgICAgICAgICAgdmFsdWU6IG5hbWUsXG4gICAgICAgICAgICBkaXNhYmxlZDpcbiAgICAgICAgICAgICAgcmVtb3RlVmVyc2lvbiAmJiBzZW12ZXIubHRlKGN1cnJlbnRWZXJzaW9uLCByZW1vdGVWZXJzaW9uKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGZpbHRlcjogU2V0PHN0cmluZz4gPSBuZXcgU2V0KGFuc3dlci5wdWJsaXNoT3B0aW9ucyk7XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICAgIGF2YWlsYWJsZVB1Ymxpc2hPcHRpb25zLnZhbHVlcygpLFxuICAgICkuZmlsdGVyKChwdWJsaXNoT3B0aW9uKSA9PiBmaWx0ZXIuaGFzKHB1Ymxpc2hPcHRpb24ubmFtZSkpO1xuICB9XG59XG4iXX0=