import { flatPackageName } from '@ssen/flat-package-name';
import fs from 'fs-extra';
import getPackageJson from 'package-json';
import path from 'path';
const getNpmRemotePackageJson = ({ name, ...options }) => {
    return getPackageJson(name, options)
        .then((value) => value && typeof value.version === 'string'
        ? value
        : undefined)
        .catch(() => undefined);
};
export async function getPublishOptions({ packages, outDir, tag: forceTag, registry: forceRegistry, getRemotePackageJson = getNpmRemotePackageJson, }) {
    if (!fs.existsSync(outDir) || !fs.statSync(outDir).isDirectory()) {
        throw new Error(`"${outDir}" directory is not exists`);
    }
    const tags = new Map();
    for (const [name, { tag }] of packages) {
        tags.set(name, tag !== null && tag !== void 0 ? tag : 'latest');
    }
    const currentPackageJsons = Array.from(packages.values())
        // PackageInfo => /path/to/dist/{name}/package.json
        .map(({ name: packageName }) => path.join(outDir, flatPackageName(packageName), 'package.json'))
        // /path/to/dist/{name}/package.json => boolean
        .filter((packageJsonFile) => fs.existsSync(packageJsonFile))
        // /path/to/dist/{name}/package.json => PackageJson
        .map((packageJsonFile) => fs.readJsonSync(packageJsonFile))
        // PackageJson => boolean
        .filter(({ name }) => typeof name === 'string');
    const remotePackageJsons = await Promise.all(currentPackageJsons.map(({ name }) => {
        if (!name)
            throw new Error(``);
        return getRemotePackageJson({
            name,
            version: forceTag || tags.get(name),
            registryUrl: forceRegistry,
            fullMetadata: true,
        });
    }));
    return currentPackageJsons.reduce((map, current, i) => {
        if (!current || !current.name) {
            throw new Error(``);
        }
        map.set(current.name, {
            name: current.name,
            tag: tags.get(current.name),
            current,
            remote: remotePackageJsons[i],
        });
        return map;
    }, new Map());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHVibGlzaE9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvQHNzZW4vcHVibGlzaC1wYWNrYWdlcy9nZXRQdWJsaXNoT3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzFCLE9BQU8sY0FBMkIsTUFBTSxjQUFjLENBQUM7QUFDdkQsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBUXhCLE1BQU0sdUJBQXVCLEdBQXlCLENBQUMsRUFDckQsSUFBSSxFQUNKLEdBQUcsT0FBTyxFQUNYLEVBQUUsRUFBRTtJQUNILE9BQU8sY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDakMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDZCxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLFFBQVE7UUFDeEMsQ0FBQyxDQUFFLEtBQXFCO1FBQ3hCLENBQUMsQ0FBQyxTQUFTLENBQ2Q7U0FDQSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBVUYsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxFQUN0QyxRQUFRLEVBQ1IsTUFBTSxFQUNOLEdBQUcsRUFBRSxRQUFRLEVBQ2IsUUFBUSxFQUFFLGFBQWEsRUFDdkIsb0JBQW9CLEdBQUcsdUJBQXVCLEdBQ3ZDO0lBQ1AsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1FBQ2hFLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxNQUFNLDJCQUEyQixDQUFDLENBQUM7S0FDeEQ7SUFFRCxNQUFNLElBQUksR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUM1QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRTtRQUN0QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLGFBQUgsR0FBRyxjQUFILEdBQUcsR0FBSSxRQUFRLENBQUMsQ0FBQztLQUNqQztJQUVELE1BQU0sbUJBQW1CLEdBQWtCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3RFLG1EQUFtRDtTQUNsRCxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FDaEU7UUFDRCwrQ0FBK0M7U0FDOUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVELG1EQUFtRDtTQUNsRCxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDM0QseUJBQXlCO1NBQ3hCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDO0lBRWxELE1BQU0sa0JBQWtCLEdBQWdDLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FHdkUsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO1FBQ25DLElBQUksQ0FBQyxJQUFJO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUvQixPQUFPLG9CQUFvQixDQUFDO1lBQzFCLElBQUk7WUFDSixPQUFPLEVBQUUsUUFBUSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ25DLFdBQVcsRUFBRSxhQUFhO1lBQzFCLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUNILENBQUM7SUFFRixPQUFPLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQjtRQUVELEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7WUFDbEIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBRTtZQUM1QixPQUFPO1lBQ1AsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQztTQUM5QixDQUFDLENBQUM7UUFFSCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBeUIsQ0FBQyxDQUFDO0FBQ3ZDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmbGF0UGFja2FnZU5hbWUgfSBmcm9tICdAc3Nlbi9mbGF0LXBhY2thZ2UtbmFtZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IGdldFBhY2thZ2VKc29uLCB7IE9wdGlvbnMgfSBmcm9tICdwYWNrYWdlLWpzb24nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBQYWNrYWdlSnNvbiB9IGZyb20gJ3R5cGUtZmVzdCc7XG5pbXBvcnQgeyBQYWNrYWdlSW5mbywgUHVibGlzaE9wdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBHZXRSZW1vdGVQYWNrYWdlSnNvbiA9IChcbiAgcGFyYW1zOiB7IG5hbWU6IHN0cmluZyB9ICYgT3B0aW9ucyxcbikgPT4gUHJvbWlzZTxQYWNrYWdlSnNvbiB8IHVuZGVmaW5lZD47XG5cbmNvbnN0IGdldE5wbVJlbW90ZVBhY2thZ2VKc29uOiBHZXRSZW1vdGVQYWNrYWdlSnNvbiA9ICh7XG4gIG5hbWUsXG4gIC4uLm9wdGlvbnNcbn0pID0+IHtcbiAgcmV0dXJuIGdldFBhY2thZ2VKc29uKG5hbWUsIG9wdGlvbnMpXG4gICAgLnRoZW4oKHZhbHVlKSA9PlxuICAgICAgdmFsdWUgJiYgdHlwZW9mIHZhbHVlLnZlcnNpb24gPT09ICdzdHJpbmcnXG4gICAgICAgID8gKHZhbHVlIGFzIFBhY2thZ2VKc29uKVxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICApXG4gICAgLmNhdGNoKCgpID0+IHVuZGVmaW5lZCk7XG59O1xuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgcGFja2FnZXM6IE1hcDxzdHJpbmcsIFBhY2thZ2VJbmZvPjtcbiAgb3V0RGlyOiBzdHJpbmc7XG4gIHRhZzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICByZWdpc3RyeTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBnZXRSZW1vdGVQYWNrYWdlSnNvbj86IEdldFJlbW90ZVBhY2thZ2VKc29uO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UHVibGlzaE9wdGlvbnMoe1xuICBwYWNrYWdlcyxcbiAgb3V0RGlyLFxuICB0YWc6IGZvcmNlVGFnLFxuICByZWdpc3RyeTogZm9yY2VSZWdpc3RyeSxcbiAgZ2V0UmVtb3RlUGFja2FnZUpzb24gPSBnZXROcG1SZW1vdGVQYWNrYWdlSnNvbixcbn06IFBhcmFtcyk6IFByb21pc2U8TWFwPHN0cmluZywgUHVibGlzaE9wdGlvbj4+IHtcbiAgaWYgKCFmcy5leGlzdHNTeW5jKG91dERpcikgfHwgIWZzLnN0YXRTeW5jKG91dERpcikuaXNEaXJlY3RvcnkoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXCIke291dERpcn1cIiBkaXJlY3RvcnkgaXMgbm90IGV4aXN0c2ApO1xuICB9XG5cbiAgY29uc3QgdGFnczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBbbmFtZSwgeyB0YWcgfV0gb2YgcGFja2FnZXMpIHtcbiAgICB0YWdzLnNldChuYW1lLCB0YWcgPz8gJ2xhdGVzdCcpO1xuICB9XG5cbiAgY29uc3QgY3VycmVudFBhY2thZ2VKc29uczogUGFja2FnZUpzb25bXSA9IEFycmF5LmZyb20ocGFja2FnZXMudmFsdWVzKCkpXG4gICAgLy8gUGFja2FnZUluZm8gPT4gL3BhdGgvdG8vZGlzdC97bmFtZX0vcGFja2FnZS5qc29uXG4gICAgLm1hcCgoeyBuYW1lOiBwYWNrYWdlTmFtZSB9KSA9PlxuICAgICAgcGF0aC5qb2luKG91dERpciwgZmxhdFBhY2thZ2VOYW1lKHBhY2thZ2VOYW1lKSwgJ3BhY2thZ2UuanNvbicpLFxuICAgIClcbiAgICAvLyAvcGF0aC90by9kaXN0L3tuYW1lfS9wYWNrYWdlLmpzb24gPT4gYm9vbGVhblxuICAgIC5maWx0ZXIoKHBhY2thZ2VKc29uRmlsZSkgPT4gZnMuZXhpc3RzU3luYyhwYWNrYWdlSnNvbkZpbGUpKVxuICAgIC8vIC9wYXRoL3RvL2Rpc3Qve25hbWV9L3BhY2thZ2UuanNvbiA9PiBQYWNrYWdlSnNvblxuICAgIC5tYXAoKHBhY2thZ2VKc29uRmlsZSkgPT4gZnMucmVhZEpzb25TeW5jKHBhY2thZ2VKc29uRmlsZSkpXG4gICAgLy8gUGFja2FnZUpzb24gPT4gYm9vbGVhblxuICAgIC5maWx0ZXIoKHsgbmFtZSB9KSA9PiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpO1xuXG4gIGNvbnN0IHJlbW90ZVBhY2thZ2VKc29uczogKFBhY2thZ2VKc29uIHwgdW5kZWZpbmVkKVtdID0gYXdhaXQgUHJvbWlzZS5hbGw8XG4gICAgUGFja2FnZUpzb24gfCB1bmRlZmluZWRcbiAgPihcbiAgICBjdXJyZW50UGFja2FnZUpzb25zLm1hcCgoeyBuYW1lIH0pID0+IHtcbiAgICAgIGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yKGBgKTtcblxuICAgICAgcmV0dXJuIGdldFJlbW90ZVBhY2thZ2VKc29uKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmVyc2lvbjogZm9yY2VUYWcgfHwgdGFncy5nZXQobmFtZSksXG4gICAgICAgIHJlZ2lzdHJ5VXJsOiBmb3JjZVJlZ2lzdHJ5LFxuICAgICAgICBmdWxsTWV0YWRhdGE6IHRydWUsXG4gICAgICB9KTtcbiAgICB9KSxcbiAgKTtcblxuICByZXR1cm4gY3VycmVudFBhY2thZ2VKc29ucy5yZWR1Y2UoKG1hcCwgY3VycmVudCwgaSkgPT4ge1xuICAgIGlmICghY3VycmVudCB8fCAhY3VycmVudC5uYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGApO1xuICAgIH1cblxuICAgIG1hcC5zZXQoY3VycmVudC5uYW1lLCB7XG4gICAgICBuYW1lOiBjdXJyZW50Lm5hbWUsXG4gICAgICB0YWc6IHRhZ3MuZ2V0KGN1cnJlbnQubmFtZSkhLFxuICAgICAgY3VycmVudCxcbiAgICAgIHJlbW90ZTogcmVtb3RlUGFja2FnZUpzb25zW2ldLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbiAgfSwgbmV3IE1hcDxzdHJpbmcsIFB1Ymxpc2hPcHRpb24+KCkpO1xufVxuIl19