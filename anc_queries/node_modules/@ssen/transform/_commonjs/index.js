"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.svgTransformer = exports.yamlTransformer = exports.imageTransformer = exports.plainTextTransformer = void 0;
const plugin_jsx_1 = __importDefault(require("@svgr/plugin-jsx"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const mini_svg_data_uri_1 = __importDefault(require("mini-svg-data-uri"));
const path_1 = __importDefault(require("path"));
exports.plainTextTransformer = {
    getSourceText: () => (file) => {
        const content = fs_extra_1.default.readFileSync(file, 'utf8');
        return `export default '${content}'`;
    },
};
exports.imageTransformer = {
    getSourceText: () => (file) => {
        const ext = path_1.default.extname(file);
        const source = fs_extra_1.default
            .readFileSync(file, 'base64')
            .replace(/[\r\n]+/gm, '');
        return `export default 'data:image/${ext};base64,${source}'`;
    },
};
exports.yamlTransformer = {
    getSourceText: () => (file) => {
        const content = fs_extra_1.default.readFileSync(file, 'utf8');
        return `export default ${JSON.stringify(js_yaml_1.default.load(content))}`;
    },
};
exports.svgTransformer = {
    /**
     * When option.variant is 'default', it will be `import ReactComponent from './some.svg'`
     * When option.variant is 'create-react-app', it will be `import svgUrl, { ReactComponent } from './some.svg'`
     *
     * @param option { variant: 'create-react-app' | 'default' } default is 'create-react-app'
     */
    getSourceText: (option) => (file) => {
        const svgCode = fs_extra_1.default
            .readFileSync(file, 'utf8')
            .replace(/[\r\n]+/gm, '');
        const componentName = 'ReactComponent';
        const reactCode = plugin_jsx_1.default(svgCode, {}, { componentName });
        if ((option === null || option === void 0 ? void 0 : option.variant) === 'default') {
            return reactCode;
        }
        const lines = reactCode.split('\n');
        return [
            ...lines.slice(0, lines.length - 1),
            `export default \`${mini_svg_data_uri_1.default(svgCode)}\`;`,
            `export {${componentName}};`,
        ].join('\n');
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQHNzZW4vdHJhbnNmb3JtL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtFQUF3QztBQUN4Qyx3REFBMEI7QUFDMUIsc0RBQTJCO0FBQzNCLDBFQUFpRDtBQUNqRCxnREFBd0I7QUFXWCxRQUFBLG9CQUFvQixHQUFnQjtJQUMvQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUNwQyxNQUFNLE9BQU8sR0FBVyxrQkFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEQsT0FBTyxtQkFBbUIsT0FBTyxHQUFHLENBQUM7SUFDdkMsQ0FBQztDQUNGLENBQUM7QUFFVyxRQUFBLGdCQUFnQixHQUFnQjtJQUMzQyxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUNwQyxNQUFNLEdBQUcsR0FBVyxjQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFXLGtCQUFFO2FBQ3RCLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO2FBQzVCLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDNUIsT0FBTyw4QkFBOEIsR0FBRyxXQUFXLE1BQU0sR0FBRyxDQUFDO0lBQy9ELENBQUM7Q0FDRixDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQWdCO0lBQzFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3BDLE1BQU0sT0FBTyxHQUFXLGtCQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RCxPQUFPLGtCQUFrQixJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoRSxDQUFDO0NBQ0YsQ0FBQztBQUVXLFFBQUEsY0FBYyxHQUFnQjtJQUN6Qzs7Ozs7T0FLRztJQUNILGFBQWEsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFZLEVBQUUsRUFBRTtRQUMxQyxNQUFNLE9BQU8sR0FBVyxrQkFBRTthQUN2QixZQUFZLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQzthQUMxQixPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sYUFBYSxHQUFXLGdCQUFnQixDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFXLG9CQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxPQUFPLE1BQUssU0FBUyxFQUFFO1lBQ2pDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsTUFBTSxLQUFLLEdBQWEsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxPQUFPO1lBQ0wsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNuQyxvQkFBb0IsMkJBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFDbEQsV0FBVyxhQUFhLElBQUk7U0FDN0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdmdUb0pzeCBmcm9tICdAc3Znci9wbHVnaW4tanN4JztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeWFtbCBmcm9tICdqcy15YW1sJztcbmltcG9ydCBzdmdUb01pbmlEYXRhVVJJIGZyb20gJ21pbmktc3ZnLWRhdGEtdXJpJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybWVyIHtcbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgZmlsZSB0byBhbiBzb3VyY2UgdGV4dFxuICAgKlxuICAgKiBAcGFyYW0gZmlsZSBBbiBhYnNvbHV0ZSBwYXRoIGxpa2UgL2Fic29sdXRlLXBhdGgvc29tZS5zdmdcbiAgICovXG4gIGdldFNvdXJjZVRleHQ6IChvcHRpb24/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiAoZmlsZTogc3RyaW5nKSA9PiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBwbGFpblRleHRUcmFuc2Zvcm1lcjogVHJhbnNmb3JtZXIgPSB7XG4gIGdldFNvdXJjZVRleHQ6ICgpID0+IChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjb250ZW50OiBzdHJpbmcgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgJ3V0ZjgnKTtcbiAgICByZXR1cm4gYGV4cG9ydCBkZWZhdWx0ICcke2NvbnRlbnR9J2A7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgaW1hZ2VUcmFuc2Zvcm1lcjogVHJhbnNmb3JtZXIgPSB7XG4gIGdldFNvdXJjZVRleHQ6ICgpID0+IChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBleHQ6IHN0cmluZyA9IHBhdGguZXh0bmFtZShmaWxlKTtcbiAgICBjb25zdCBzb3VyY2U6IHN0cmluZyA9IGZzXG4gICAgICAucmVhZEZpbGVTeW5jKGZpbGUsICdiYXNlNjQnKVxuICAgICAgLnJlcGxhY2UoL1tcXHJcXG5dKy9nbSwgJycpO1xuICAgIHJldHVybiBgZXhwb3J0IGRlZmF1bHQgJ2RhdGE6aW1hZ2UvJHtleHR9O2Jhc2U2NCwke3NvdXJjZX0nYDtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCB5YW1sVHJhbnNmb3JtZXI6IFRyYW5zZm9ybWVyID0ge1xuICBnZXRTb3VyY2VUZXh0OiAoKSA9PiAoZmlsZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgY29udGVudDogc3RyaW5nID0gZnMucmVhZEZpbGVTeW5jKGZpbGUsICd1dGY4Jyk7XG4gICAgcmV0dXJuIGBleHBvcnQgZGVmYXVsdCAke0pTT04uc3RyaW5naWZ5KHlhbWwubG9hZChjb250ZW50KSl9YDtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBzdmdUcmFuc2Zvcm1lcjogVHJhbnNmb3JtZXIgPSB7XG4gIC8qKlxuICAgKiBXaGVuIG9wdGlvbi52YXJpYW50IGlzICdkZWZhdWx0JywgaXQgd2lsbCBiZSBgaW1wb3J0IFJlYWN0Q29tcG9uZW50IGZyb20gJy4vc29tZS5zdmcnYFxuICAgKiBXaGVuIG9wdGlvbi52YXJpYW50IGlzICdjcmVhdGUtcmVhY3QtYXBwJywgaXQgd2lsbCBiZSBgaW1wb3J0IHN2Z1VybCwgeyBSZWFjdENvbXBvbmVudCB9IGZyb20gJy4vc29tZS5zdmcnYFxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9uIHsgdmFyaWFudDogJ2NyZWF0ZS1yZWFjdC1hcHAnIHwgJ2RlZmF1bHQnIH0gZGVmYXVsdCBpcyAnY3JlYXRlLXJlYWN0LWFwcCdcbiAgICovXG4gIGdldFNvdXJjZVRleHQ6IChvcHRpb24pID0+IChmaWxlOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBzdmdDb2RlOiBzdHJpbmcgPSBmc1xuICAgICAgLnJlYWRGaWxlU3luYyhmaWxlLCAndXRmOCcpXG4gICAgICAucmVwbGFjZSgvW1xcclxcbl0rL2dtLCAnJyk7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZTogc3RyaW5nID0gJ1JlYWN0Q29tcG9uZW50JztcbiAgICBjb25zdCByZWFjdENvZGU6IHN0cmluZyA9IHN2Z1RvSnN4KHN2Z0NvZGUsIHt9LCB7IGNvbXBvbmVudE5hbWUgfSk7XG5cbiAgICBpZiAob3B0aW9uPy52YXJpYW50ID09PSAnZGVmYXVsdCcpIHtcbiAgICAgIHJldHVybiByZWFjdENvZGU7XG4gICAgfVxuXG4gICAgY29uc3QgbGluZXM6IHN0cmluZ1tdID0gcmVhY3RDb2RlLnNwbGl0KCdcXG4nKTtcbiAgICByZXR1cm4gW1xuICAgICAgLi4ubGluZXMuc2xpY2UoMCwgbGluZXMubGVuZ3RoIC0gMSksXG4gICAgICBgZXhwb3J0IGRlZmF1bHQgXFxgJHtzdmdUb01pbmlEYXRhVVJJKHN2Z0NvZGUpfVxcYDtgLFxuICAgICAgYGV4cG9ydCB7JHtjb21wb25lbnROYW1lfX07YCxcbiAgICBdLmpvaW4oJ1xcbicpO1xuICB9LFxufTtcbiJdfQ==