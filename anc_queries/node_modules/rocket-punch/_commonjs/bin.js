"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const read_last_argv_1 = require("@ssen/read-last-argv");
const path_1 = __importDefault(require("path"));
const process = __importStar(require("process"));
const yargs_1 = __importDefault(require("yargs"));
const build_1 = require("./build");
const doctor_1 = require("./doctor");
const readEntry_1 = require("./entry/readEntry");
const build_2 = require("./message-handlers/build");
const doctor_2 = require("./message-handlers/doctor");
const publish_1 = require("./message-handlers/publish");
const view_1 = require("./message-handlers/view");
const publish_2 = require("./publish");
const view_2 = require("./view");
const cwd = process.cwd();
const commonOptions = {
    'emit': {
        type: 'boolean',
        default: true,
        describe: 'if you set this false it will only print options without run (e.g. --no-emit or --emit false)',
    },
    'source-root': {
        type: 'string',
        describe: 'source root (e.g. --source-root src)',
    },
};
const buildOptions = {
    'out-dir': {
        type: 'string',
        alias: 'o',
        describe: 'output directory (e.g. --out-dir out/packages)',
    },
    'show-packages-order': {
        type: 'boolean',
        default: false,
        describe: 'debug packages order',
    },
    'tsconfig': {
        type: 'string',
        alias: 't',
        describe: 'tsconfig file name (e.g. --tsconfig tsconfig.dev.json)',
    },
    'svg': {
        type: 'string',
        choices: ['create-react-app', 'default'],
        describe: 'svg compile type <default|create-react-app> (e.g. --svg default)',
    },
    'strict': {
        type: 'boolean',
        default: false,
        describe: 'if you set this true it will return exit 1 and stop build when there are tsc build warnings',
    },
};
const publishOptions = {
    'out-dir': buildOptions['out-dir'],
    'skip-selection': {
        type: 'boolean',
        alias: 's',
        describe: 'if true publish all packages without user selection',
    },
    'tag': {
        type: 'string',
        alias: 't',
        describe: 'npm publish --tag {tag}',
    },
    'access': {
        type: 'string',
        alias: 'a',
        describe: 'npm publish --access <public|private>',
    },
    'registry': {
        type: 'string',
        alias: 'r',
        describe: 'npm publish --registry {registry}',
    },
};
function toAbsolutePath(dir) {
    if (typeof dir !== 'string') {
        return undefined;
    }
    else if (path_1.default.isAbsolute(dir)) {
        return dir;
    }
    else {
        return path_1.default.join(cwd, dir);
    }
}
function run() {
    return yargs_1.default
        .command({
        command: 'build',
        describe: 'Build packages',
        builder: (argv) => argv
            .options({
            ...buildOptions,
            ...commonOptions,
        })
            .example('$0 build --out-dir /some/directory', 'Build packages to specific directory')
            .example('$0 build --tsconfig tsconfig.build.json', 'Use another tsconfig.json file on build')
            .example('$0 build --svg default', 'SVG transform to `import ReactComponent from "./file.svg"`'),
        handler: (argv) => {
            const { emit, outDir, tsconfig, sourceRoot, svg, strict, showPackagesOrder, } = read_last_argv_1.readLastArgv(argv);
            const params = {
                cwd,
                svg: svg === 'default' ? 'default' : 'create-react-app',
                dist: toAbsolutePath(outDir),
                showPackagesOrder: showPackagesOrder === true,
                tsconfig,
                sourceRoot,
                strict,
                entry: readEntry_1.readEntry({ cwd }),
                onMessage: build_2.buildMessageHandler,
            };
            if (emit) {
                build_1.build(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'publish',
        describe: 'Publish packages',
        builder: (argv) => argv
            .options({
            ...publishOptions,
            ...commonOptions,
        })
            .example('$0 publish', 'Publish packages')
            .example('$0 publish --out-dir /some/directory', 'Publish packages from specific directory')
            .example('$0 publish --skip-selection', 'Publish all packages without user selection (e.g. CI)')
            .example('$0 publish --skip-selection --tag e2e --registry http://localhost:4873', 'E2E test'),
        handler: (argv) => {
            const { registry, outDir, sourceRoot, emit, access, skipSelection, tag, } = read_last_argv_1.readLastArgv(argv);
            const params = {
                cwd,
                dist: toAbsolutePath(outDir),
                entry: readEntry_1.readEntry({ cwd }),
                skipSelection,
                sourceRoot,
                tag,
                access: access === 'public' || access === 'private' ? access : undefined,
                registry,
                onMessage: publish_1.publishMessageHandler,
            };
            if (emit) {
                publish_2.publish(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'view',
        describe: 'View packages information',
        builder: (argv) => argv
            .options({ ...commonOptions })
            .example('$0 view', 'View packages information'),
        handler: (argv) => {
            const { emit, sourceRoot } = read_last_argv_1.readLastArgv(argv);
            const params = {
                cwd,
                sourceRoot,
                entry: readEntry_1.readEntry({ cwd }),
                onMessage: view_1.viewMessageHandler,
            };
            if (emit) {
                view_2.view(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'doctor',
        describe: 'Check configs is validate for rocket-punch',
        builder: (argv) => argv
            .options({ ...commonOptions })
            .example('$0 doctor', 'Check configs is validate for rocket-punch'),
        handler: (argv) => {
            const { emit, sourceRoot } = read_last_argv_1.readLastArgv(argv);
            const params = {
                cwd,
                sourceRoot,
                entry: readEntry_1.readEntry({ cwd }),
                onMessage: doctor_2.doctorMessageHandler,
            };
            if (emit) {
                doctor_1.doctor(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .wrap(null)
        .help('h')
        .alias('h', 'help')
        .showHelpOnFail(true)
        .demandCommand()
        .recommendCommands()
        .strict()
        .epilog('ðŸš€ Rocket Punch!').argv;
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,