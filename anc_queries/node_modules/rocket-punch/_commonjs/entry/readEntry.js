"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readEntry = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const path_1 = __importDefault(require("path"));
const fileNames_1 = require("../rule/fileNames");
function readEntry({ cwd, }) {
    let packages = undefined;
    if (fs_extra_1.default.existsSync(path_1.default.join(cwd, fileNames_1.packagesJsonFileName))) {
        packages = fs_extra_1.default.readJsonSync(path_1.default.join(cwd, fileNames_1.packagesJsonFileName));
    }
    else if (fs_extra_1.default.existsSync(path_1.default.join(cwd, fileNames_1.packagesYamlFileName))) {
        const source = fs_extra_1.default.readFileSync(path_1.default.join(cwd, fileNames_1.packagesYamlFileName), {
            encoding: 'utf8',
        });
        const content = js_yaml_1.default.load(source);
        if (!content ||
            typeof content === 'string' ||
            typeof content === 'number') {
            throw new Error(`yaml.safeLoad does not return an object`);
        }
        packages = content;
    }
    if (!packages) {
        throw new Error(`could not find .packages.json or .packages.yaml files`);
    }
    const { 
    // ignore special keys
    $schema, ...entry } = packages;
    return entry;
}
exports.readEntry = readEntry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEVudHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9lbnRyeS9yZWFkRW50cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0RBQTBCO0FBQzFCLHNEQUEyQjtBQUMzQixnREFBd0I7QUFDeEIsaURBQStFO0FBTy9FLFNBQWdCLFNBQVMsQ0FBQyxFQUN4QixHQUFHLEdBQ0k7SUFDUCxJQUFJLFFBQVEsR0FBdUIsU0FBUyxDQUFDO0lBRTdDLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZ0NBQW9CLENBQUMsQ0FBQyxFQUFFO1FBQ3ZELFFBQVEsR0FBRyxrQkFBRSxDQUFDLFlBQVksQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxnQ0FBb0IsQ0FBQyxDQUFDLENBQUM7S0FDbEU7U0FBTSxJQUFJLGtCQUFFLENBQUMsVUFBVSxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGdDQUFvQixDQUFDLENBQUMsRUFBRTtRQUM5RCxNQUFNLE1BQU0sR0FBVyxrQkFBRSxDQUFDLFlBQVksQ0FDcEMsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsZ0NBQW9CLENBQUMsRUFDcEM7WUFDRSxRQUFRLEVBQUUsTUFBTTtTQUNqQixDQUNGLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBZ0QsaUJBQUksQ0FBQyxJQUFJLENBQ3BFLE1BQU0sQ0FDUCxDQUFDO1FBRUYsSUFDRSxDQUFDLE9BQU87WUFDUixPQUFPLE9BQU8sS0FBSyxRQUFRO1lBQzNCLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFDM0I7WUFDQSxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxRQUFRLEdBQUcsT0FBTyxDQUFDO0tBQ3BCO0lBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztLQUMxRTtJQUVELE1BQU07SUFDSixzQkFBc0I7SUFDdEIsT0FBTyxFQUNQLEdBQUcsS0FBSyxFQUNULEdBQUcsUUFBa0QsQ0FBQztJQUV2RCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUF6Q0QsOEJBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwYWNrYWdlc0pzb25GaWxlTmFtZSwgcGFja2FnZXNZYW1sRmlsZU5hbWUgfSBmcm9tICcuLi9ydWxlL2ZpbGVOYW1lcyc7XG5pbXBvcnQgeyBQYWNrYWdlQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgY3dkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkRW50cnkoe1xuICBjd2QsXG59OiBQYXJhbXMpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBQYWNrYWdlQ29uZmlnPiB7XG4gIGxldCBwYWNrYWdlczogb2JqZWN0IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIGlmIChmcy5leGlzdHNTeW5jKHBhdGguam9pbihjd2QsIHBhY2thZ2VzSnNvbkZpbGVOYW1lKSkpIHtcbiAgICBwYWNrYWdlcyA9IGZzLnJlYWRKc29uU3luYyhwYXRoLmpvaW4oY3dkLCBwYWNrYWdlc0pzb25GaWxlTmFtZSkpO1xuICB9IGVsc2UgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKGN3ZCwgcGFja2FnZXNZYW1sRmlsZU5hbWUpKSkge1xuICAgIGNvbnN0IHNvdXJjZTogc3RyaW5nID0gZnMucmVhZEZpbGVTeW5jKFxuICAgICAgcGF0aC5qb2luKGN3ZCwgcGFja2FnZXNZYW1sRmlsZU5hbWUpLFxuICAgICAge1xuICAgICAgICBlbmNvZGluZzogJ3V0ZjgnLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgY29uc3QgY29udGVudDogb2JqZWN0IHwgbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCA9IHlhbWwubG9hZChcbiAgICAgIHNvdXJjZSxcbiAgICApO1xuXG4gICAgaWYgKFxuICAgICAgIWNvbnRlbnQgfHxcbiAgICAgIHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJyB8fFxuICAgICAgdHlwZW9mIGNvbnRlbnQgPT09ICdudW1iZXInXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHlhbWwuc2FmZUxvYWQgZG9lcyBub3QgcmV0dXJuIGFuIG9iamVjdGApO1xuICAgIH1cblxuICAgIHBhY2thZ2VzID0gY29udGVudDtcbiAgfVxuXG4gIGlmICghcGFja2FnZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkIG5vdCBmaW5kIC5wYWNrYWdlcy5qc29uIG9yIC5wYWNrYWdlcy55YW1sIGZpbGVzYCk7XG4gIH1cblxuICBjb25zdCB7XG4gICAgLy8gaWdub3JlIHNwZWNpYWwga2V5c1xuICAgICRzY2hlbWEsXG4gICAgLi4uZW50cnlcbiAgfSA9IHBhY2thZ2VzIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IFBhY2thZ2VDb25maWc+O1xuXG4gIHJldHVybiBlbnRyeTtcbn1cbiJdfQ==