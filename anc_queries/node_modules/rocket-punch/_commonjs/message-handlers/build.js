"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildMessageHandler = void 0;
const typescript_1 = __importDefault(require("typescript"));
const chalk_1 = __importDefault(require("chalk"));
async function buildMessageHandler(message) {
    switch (message.type) {
        case 'begin':
            console.log(chalk_1.default.bold(`Build "${message.packageName}"`));
            console.log('');
            break;
        case 'tsc':
            for (const diagnostic of message.diagnostics) {
                if (diagnostic.file && diagnostic.start) {
                    const { line, character, } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const diagnosticMessage = typescript_1.default.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    console.log(chalk_1.default.yellow(`TS${diagnostic.code} : ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${diagnosticMessage}`));
                }
                else {
                    console.log(chalk_1.default.yellow(`TS${diagnostic.code} : ${typescript_1.default.flattenDiagnosticMessageText(diagnostic.messageText, '\n')}`));
                }
            }
            break;
        case 'package-json':
            console.log(chalk_1.default.gray(JSON.stringify(message.packageJson, null, 2)));
            console.log('');
            break;
        case 'success':
            console.log(chalk_1.default.blueBright(`üëç ${message.packageName}@${message.packageJson.version} ‚Üí ${message.outDir}`));
            console.log('');
            break;
    }
}
exports.buildMessageHandler = buildMessageHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcm9ja2V0LXB1bmNoL21lc3NhZ2UtaGFuZGxlcnMvYnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsNERBQTRCO0FBQzVCLGtEQUEwQjtBQUVuQixLQUFLLFVBQVUsbUJBQW1CLENBQUMsT0FBc0I7SUFDOUQsUUFBUSxPQUFPLENBQUMsSUFBSSxFQUFFO1FBQ3BCLEtBQUssT0FBTztZQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBSyxDQUFDLElBQUksQ0FBQyxVQUFVLE9BQU8sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixNQUFNO1FBQ1IsS0FBSyxLQUFLO1lBQ1IsS0FBSyxNQUFNLFVBQVUsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFO2dCQUM1QyxJQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRTtvQkFDdkMsTUFBTSxFQUNKLElBQUksRUFDSixTQUFTLEdBQ1YsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEUsTUFBTSxpQkFBaUIsR0FBVyxvQkFBRSxDQUFDLDRCQUE0QixDQUMvRCxVQUFVLENBQUMsV0FBVyxFQUN0QixJQUFJLENBQ0wsQ0FBQztvQkFDRixPQUFPLENBQUMsR0FBRyxDQUNULGVBQUssQ0FBQyxNQUFNLENBQ1YsS0FBSyxVQUFVLENBQUMsSUFBSSxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUNoRCxJQUFJLEdBQUcsQ0FDVCxJQUFJLFNBQVMsR0FBRyxDQUFDLE1BQU0saUJBQWlCLEVBQUUsQ0FDM0MsQ0FDRixDQUFDO2lCQUNIO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxHQUFHLENBQ1QsZUFBSyxDQUFDLE1BQU0sQ0FDVixLQUFLLFVBQVUsQ0FBQyxJQUFJLE1BQU0sb0JBQUUsQ0FBQyw0QkFBNEIsQ0FDdkQsVUFBVSxDQUFDLFdBQVcsRUFDdEIsSUFBSSxDQUNMLEVBQUUsQ0FDSixDQUNGLENBQUM7aUJBQ0g7YUFDRjtZQUNELE1BQU07UUFDUixLQUFLLGNBQWM7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsTUFBTTtRQUNSLEtBQUssU0FBUztZQUNaLE9BQU8sQ0FBQyxHQUFHLENBQ1QsZUFBSyxDQUFDLFVBQVUsQ0FDZCxNQUFNLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLE1BQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUMvRSxDQUNGLENBQUM7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLE1BQU07S0FDVDtBQUNILENBQUM7QUFqREQsa0RBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnVpbGRNZXNzYWdlcyB9IGZyb20gJy4uL3BhcmFtcyc7XG5pbXBvcnQgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYnVpbGRNZXNzYWdlSGFuZGxlcihtZXNzYWdlOiBCdWlsZE1lc3NhZ2VzKSB7XG4gIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgY2FzZSAnYmVnaW4nOlxuICAgICAgY29uc29sZS5sb2coY2hhbGsuYm9sZChgQnVpbGQgXCIke21lc3NhZ2UucGFja2FnZU5hbWV9XCJgKSk7XG4gICAgICBjb25zb2xlLmxvZygnJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0c2MnOlxuICAgICAgZm9yIChjb25zdCBkaWFnbm9zdGljIG9mIG1lc3NhZ2UuZGlhZ25vc3RpY3MpIHtcbiAgICAgICAgaWYgKGRpYWdub3N0aWMuZmlsZSAmJiBkaWFnbm9zdGljLnN0YXJ0KSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgIGNoYXJhY3RlcixcbiAgICAgICAgICB9ID0gZGlhZ25vc3RpYy5maWxlLmdldExpbmVBbmRDaGFyYWN0ZXJPZlBvc2l0aW9uKGRpYWdub3N0aWMuc3RhcnQpO1xuICAgICAgICAgIGNvbnN0IGRpYWdub3N0aWNNZXNzYWdlOiBzdHJpbmcgPSB0cy5mbGF0dGVuRGlhZ25vc3RpY01lc3NhZ2VUZXh0KFxuICAgICAgICAgICAgZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCxcbiAgICAgICAgICAgICdcXG4nLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBjaGFsay55ZWxsb3coXG4gICAgICAgICAgICAgIGBUUyR7ZGlhZ25vc3RpYy5jb2RlfSA6ICR7ZGlhZ25vc3RpYy5maWxlLmZpbGVOYW1lfSAoJHtcbiAgICAgICAgICAgICAgICBsaW5lICsgMVxuICAgICAgICAgICAgICB9LCR7Y2hhcmFjdGVyICsgMX0pOiAke2RpYWdub3N0aWNNZXNzYWdlfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBjaGFsay55ZWxsb3coXG4gICAgICAgICAgICAgIGBUUyR7ZGlhZ25vc3RpYy5jb2RlfSA6ICR7dHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChcbiAgICAgICAgICAgICAgICBkaWFnbm9zdGljLm1lc3NhZ2VUZXh0LFxuICAgICAgICAgICAgICAgICdcXG4nLFxuICAgICAgICAgICAgICApfWAsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3BhY2thZ2UtanNvbic6XG4gICAgICBjb25zb2xlLmxvZyhjaGFsay5ncmF5KEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UucGFja2FnZUpzb24sIG51bGwsIDIpKSk7XG4gICAgICBjb25zb2xlLmxvZygnJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBjaGFsay5ibHVlQnJpZ2h0KFxuICAgICAgICAgIGDwn5GNICR7bWVzc2FnZS5wYWNrYWdlTmFtZX1AJHttZXNzYWdlLnBhY2thZ2VKc29uLnZlcnNpb259IOKGkiAke21lc3NhZ2Uub3V0RGlyfWAsXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgY29uc29sZS5sb2coJycpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cbiJdfQ==