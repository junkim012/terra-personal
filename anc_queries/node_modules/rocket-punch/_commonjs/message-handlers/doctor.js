"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doctorMessageHandler = void 0;
const chalk_1 = __importDefault(require("chalk"));
async function doctorMessageHandler(message) {
    switch (message.type) {
        case 'depcheck':
            const { dependencies, devDependencies, missing } = message.result;
            if (dependencies.length > 0) {
                console.log(chalk_1.default.bold(`Do you use these dependencies? couldn't find your source codes that using these dependencies.`));
                for (const packageName of dependencies) {
                    console.log(chalk_1.default.yellow(`- ${packageName}`));
                }
                console.log('');
            }
            if (devDependencies.length > 0) {
                console.log(chalk_1.default.bold(`Do you use these devDependencies? couldn't find your source codes that using these devDependencies.`));
                for (const packageName of devDependencies) {
                    console.log(chalk_1.default.yellow(`- ${packageName}`));
                }
                console.log('');
            }
            const missingKeys = Object.keys(missing);
            if (missingKeys.length > 0) {
                console.log(chalk_1.default.bold(`Did you install these dependencies? couldn't find these dependencies in your package.json.`));
                for (const packageName of missingKeys) {
                    console.log(chalk_1.default.yellow(`- ${packageName}`));
                }
                console.log('');
            }
            break;
        case 'tsconfig':
            for (const result of message.result) {
                console.log(chalk_1.default.bold(result.message));
                console.log(chalk_1.default.blueBright(JSON.stringify(result.fixer, null, 2)));
            }
            break;
    }
}
exports.doctorMessageHandler = doctorMessageHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9tZXNzYWdlLWhhbmRsZXJzL2RvY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFHbkIsS0FBSyxVQUFVLG9CQUFvQixDQUFDLE9BQXVCO0lBQ2hFLFFBQVEsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNwQixLQUFLLFVBQVU7WUFDYixNQUFNLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ2xFLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsZUFBSyxDQUFDLElBQUksQ0FDUiwrRkFBK0YsQ0FDaEcsQ0FDRixDQUFDO2dCQUNGLEtBQUssTUFBTSxXQUFXLElBQUksWUFBWSxFQUFFO29CQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQy9DO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDakI7WUFFRCxJQUFJLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUNULGVBQUssQ0FBQyxJQUFJLENBQ1IscUdBQXFHLENBQ3RHLENBQ0YsQ0FBQztnQkFDRixLQUFLLE1BQU0sV0FBVyxJQUFJLGVBQWUsRUFBRTtvQkFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxXQUFXLEdBQWEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixPQUFPLENBQUMsR0FBRyxDQUNULGVBQUssQ0FBQyxJQUFJLENBQ1IsNEZBQTRGLENBQzdGLENBQ0YsQ0FBQztnQkFDRixLQUFLLE1BQU0sV0FBVyxJQUFJLFdBQVcsRUFBRTtvQkFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2pCO1lBQ0QsTUFBTTtRQUNSLEtBQUssVUFBVTtZQUNiLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtnQkFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDdEU7WUFDRCxNQUFNO0tBQ1Q7QUFDSCxDQUFDO0FBaERELG9EQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgeyBEb2N0b3JNZXNzYWdlcyB9IGZyb20gJy4uL3BhcmFtcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb2N0b3JNZXNzYWdlSGFuZGxlcihtZXNzYWdlOiBEb2N0b3JNZXNzYWdlcykge1xuICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgIGNhc2UgJ2RlcGNoZWNrJzpcbiAgICAgIGNvbnN0IHsgZGVwZW5kZW5jaWVzLCBkZXZEZXBlbmRlbmNpZXMsIG1pc3NpbmcgfSA9IG1lc3NhZ2UucmVzdWx0O1xuICAgICAgaWYgKGRlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGNoYWxrLmJvbGQoXG4gICAgICAgICAgICBgRG8geW91IHVzZSB0aGVzZSBkZXBlbmRlbmNpZXM/IGNvdWxkbid0IGZpbmQgeW91ciBzb3VyY2UgY29kZXMgdGhhdCB1c2luZyB0aGVzZSBkZXBlbmRlbmNpZXMuYCxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIGRlcGVuZGVuY2llcykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGNoYWxrLnllbGxvdyhgLSAke3BhY2thZ2VOYW1lfWApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygnJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZXZEZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBjaGFsay5ib2xkKFxuICAgICAgICAgICAgYERvIHlvdSB1c2UgdGhlc2UgZGV2RGVwZW5kZW5jaWVzPyBjb3VsZG4ndCBmaW5kIHlvdXIgc291cmNlIGNvZGVzIHRoYXQgdXNpbmcgdGhlc2UgZGV2RGVwZW5kZW5jaWVzLmAsXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgICAgZm9yIChjb25zdCBwYWNrYWdlTmFtZSBvZiBkZXZEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhjaGFsay55ZWxsb3coYC0gJHtwYWNrYWdlTmFtZX1gKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtaXNzaW5nS2V5czogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhtaXNzaW5nKTtcbiAgICAgIGlmIChtaXNzaW5nS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIGNoYWxrLmJvbGQoXG4gICAgICAgICAgICBgRGlkIHlvdSBpbnN0YWxsIHRoZXNlIGRlcGVuZGVuY2llcz8gY291bGRuJ3QgZmluZCB0aGVzZSBkZXBlbmRlbmNpZXMgaW4geW91ciBwYWNrYWdlLmpzb24uYCxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIG1pc3NpbmdLZXlzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coY2hhbGsueWVsbG93KGAtICR7cGFja2FnZU5hbWV9YCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCcnKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RzY29uZmlnJzpcbiAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIG1lc3NhZ2UucmVzdWx0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQocmVzdWx0Lm1lc3NhZ2UpKTtcbiAgICAgICAgY29uc29sZS5sb2coY2hhbGsuYmx1ZUJyaWdodChKU09OLnN0cmluZ2lmeShyZXN1bHQuZml4ZXIsIG51bGwsIDIpKSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufVxuIl19