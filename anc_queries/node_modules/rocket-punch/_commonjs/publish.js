"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.publish = void 0;
const flat_package_name_1 = require("@ssen/flat-package-name");
const publish_packages_1 = require("@ssen/publish-packages");
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const readPackages_1 = require("./entry/readPackages");
const publish_1 = require("./message-handlers/publish");
async function publish({ cwd = process_1.default.cwd(), sourceRoot = 'src', dist = path_1.default.join(cwd, 'out/packages'), skipSelection = false, tag, access, entry, registry, onMessage = publish_1.publishMessageHandler, }) {
    const packages = await readPackages_1.readPackages({
        cwd,
        sourceRoot,
        entry,
    });
    const publishOptions = await publish_packages_1.getPublishOptions({
        packages,
        outDir: dist,
        tag,
        registry,
    });
    const selectedPublishOptions = await publish_packages_1.selectPublishOptions({
        publishOptions,
        skipSelection,
    });
    for (const publishOption of selectedPublishOptions) {
        const packageInfo = packages.get(publishOption.name);
        if (!packageInfo) {
            throw new Error(`Undefined packageInfo "${publishOption.name}"`);
        }
        const p = [`--tag ${tag || publishOption.tag}`];
        if (access) {
            p.push(`--access ${access}`);
        }
        else if (packageInfo.access) {
            p.push(`--access ${packageInfo.access}`);
        }
        if (registry) {
            p.push(`--registry "${registry}"`);
        }
        else if (packageInfo.registry) {
            p.push(`--registry "${packageInfo.registry}"`);
        }
        const command = process_1.default.platform === 'win32'
            ? `cd "${path_1.default.join(dist, flat_package_name_1.flatPackageName(publishOption.name))}" && npm publish ${p.join(' ')}`
            : `cd "${path_1.default.join(dist, flat_package_name_1.flatPackageName(publishOption.name))}"; npm publish ${p.join(' ')};`;
        await onMessage({
            type: 'exec',
            command,
            publishOption,
        });
    }
}
exports.publish = publish;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yb2NrZXQtcHVuY2gvcHVibGlzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrREFBMEQ7QUFDMUQsNkRBSWdDO0FBQ2hDLGdEQUF3QjtBQUN4QixzREFBOEI7QUFDOUIsdURBQW9EO0FBQ3BELHdEQUFtRTtBQUk1RCxLQUFLLFVBQVUsT0FBTyxDQUFDLEVBQzVCLEdBQUcsR0FBRyxpQkFBTyxDQUFDLEdBQUcsRUFBRSxFQUNuQixVQUFVLEdBQUcsS0FBSyxFQUNsQixJQUFJLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLEVBQ3JDLGFBQWEsR0FBRyxLQUFLLEVBQ3JCLEdBQUcsRUFDSCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixTQUFTLEdBQUcsK0JBQXFCLEdBQ25CO0lBQ2QsTUFBTSxRQUFRLEdBQTZCLE1BQU0sMkJBQVksQ0FBQztRQUM1RCxHQUFHO1FBQ0gsVUFBVTtRQUNWLEtBQUs7S0FDTixDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBK0IsTUFBTSxvQ0FBaUIsQ0FBQztRQUN6RSxRQUFRO1FBQ1IsTUFBTSxFQUFFLElBQUk7UUFDWixHQUFHO1FBQ0gsUUFBUTtLQUNULENBQUMsQ0FBQztJQUVILE1BQU0sc0JBQXNCLEdBQTZCLE1BQU0sdUNBQW9CLENBQ2pGO1FBQ0UsY0FBYztRQUNkLGFBQWE7S0FDZCxDQUNGLENBQUM7SUFFRixLQUFLLE1BQU0sYUFBYSxJQUFJLHNCQUFzQixFQUFFO1FBQ2xELE1BQU0sV0FBVyxHQUE0QixRQUFRLENBQUMsR0FBRyxDQUN2RCxhQUFhLENBQUMsSUFBSSxDQUNuQixDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNsRTtRQUVELE1BQU0sQ0FBQyxHQUFhLENBQUMsU0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFMUQsSUFBSSxNQUFNLEVBQUU7WUFDVixDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM5QjthQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO2FBQU0sSUFBSSxXQUFXLENBQUMsUUFBUSxFQUFFO1lBQy9CLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU0sT0FBTyxHQUNYLGlCQUFPLENBQUMsUUFBUSxLQUFLLE9BQU87WUFDMUIsQ0FBQyxDQUFDLE9BQU8sY0FBSSxDQUFDLElBQUksQ0FDZCxJQUFJLEVBQ0osbUNBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQ3BDLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLENBQUMsQ0FBQyxPQUFPLGNBQUksQ0FBQyxJQUFJLENBQ2QsSUFBSSxFQUNKLG1DQUFlLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUNwQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBRXhDLE1BQU0sU0FBUyxDQUFDO1lBQ2QsSUFBSSxFQUFFLE1BQU07WUFDWixPQUFPO1lBQ1AsYUFBYTtTQUNkLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQXZFRCwwQkF1RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmbGF0UGFja2FnZU5hbWUgfSBmcm9tICdAc3Nlbi9mbGF0LXBhY2thZ2UtbmFtZSc7XG5pbXBvcnQge1xuICBBdmFpbGFibGVQdWJsaXNoT3B0aW9uLFxuICBnZXRQdWJsaXNoT3B0aW9ucyxcbiAgc2VsZWN0UHVibGlzaE9wdGlvbnMsXG59IGZyb20gJ0Bzc2VuL3B1Ymxpc2gtcGFja2FnZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlcyB9IGZyb20gJy4vZW50cnkvcmVhZFBhY2thZ2VzJztcbmltcG9ydCB7IHB1Ymxpc2hNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vbWVzc2FnZS1oYW5kbGVycy9wdWJsaXNoJztcbmltcG9ydCB7IFB1Ymxpc2hQYXJhbXMgfSBmcm9tICcuL3BhcmFtcyc7XG5pbXBvcnQgeyBQYWNrYWdlSW5mbywgUHVibGlzaE9wdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVibGlzaCh7XG4gIGN3ZCA9IHByb2Nlc3MuY3dkKCksXG4gIHNvdXJjZVJvb3QgPSAnc3JjJyxcbiAgZGlzdCA9IHBhdGguam9pbihjd2QsICdvdXQvcGFja2FnZXMnKSxcbiAgc2tpcFNlbGVjdGlvbiA9IGZhbHNlLFxuICB0YWcsXG4gIGFjY2VzcyxcbiAgZW50cnksXG4gIHJlZ2lzdHJ5LFxuICBvbk1lc3NhZ2UgPSBwdWJsaXNoTWVzc2FnZUhhbmRsZXIsXG59OiBQdWJsaXNoUGFyYW1zKSB7XG4gIGNvbnN0IHBhY2thZ2VzOiBNYXA8c3RyaW5nLCBQYWNrYWdlSW5mbz4gPSBhd2FpdCByZWFkUGFja2FnZXMoe1xuICAgIGN3ZCxcbiAgICBzb3VyY2VSb290LFxuICAgIGVudHJ5LFxuICB9KTtcblxuICBjb25zdCBwdWJsaXNoT3B0aW9uczogTWFwPHN0cmluZywgUHVibGlzaE9wdGlvbj4gPSBhd2FpdCBnZXRQdWJsaXNoT3B0aW9ucyh7XG4gICAgcGFja2FnZXMsXG4gICAgb3V0RGlyOiBkaXN0LFxuICAgIHRhZyxcbiAgICByZWdpc3RyeSxcbiAgfSk7XG5cbiAgY29uc3Qgc2VsZWN0ZWRQdWJsaXNoT3B0aW9uczogQXZhaWxhYmxlUHVibGlzaE9wdGlvbltdID0gYXdhaXQgc2VsZWN0UHVibGlzaE9wdGlvbnMoXG4gICAge1xuICAgICAgcHVibGlzaE9wdGlvbnMsXG4gICAgICBza2lwU2VsZWN0aW9uLFxuICAgIH0sXG4gICk7XG5cbiAgZm9yIChjb25zdCBwdWJsaXNoT3B0aW9uIG9mIHNlbGVjdGVkUHVibGlzaE9wdGlvbnMpIHtcbiAgICBjb25zdCBwYWNrYWdlSW5mbzogUGFja2FnZUluZm8gfCB1bmRlZmluZWQgPSBwYWNrYWdlcy5nZXQoXG4gICAgICBwdWJsaXNoT3B0aW9uLm5hbWUsXG4gICAgKTtcblxuICAgIGlmICghcGFja2FnZUluZm8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5kZWZpbmVkIHBhY2thZ2VJbmZvIFwiJHtwdWJsaXNoT3B0aW9uLm5hbWV9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwOiBzdHJpbmdbXSA9IFtgLS10YWcgJHt0YWcgfHwgcHVibGlzaE9wdGlvbi50YWd9YF07XG5cbiAgICBpZiAoYWNjZXNzKSB7XG4gICAgICBwLnB1c2goYC0tYWNjZXNzICR7YWNjZXNzfWApO1xuICAgIH0gZWxzZSBpZiAocGFja2FnZUluZm8uYWNjZXNzKSB7XG4gICAgICBwLnB1c2goYC0tYWNjZXNzICR7cGFja2FnZUluZm8uYWNjZXNzfWApO1xuICAgIH1cblxuICAgIGlmIChyZWdpc3RyeSkge1xuICAgICAgcC5wdXNoKGAtLXJlZ2lzdHJ5IFwiJHtyZWdpc3RyeX1cImApO1xuICAgIH0gZWxzZSBpZiAocGFja2FnZUluZm8ucmVnaXN0cnkpIHtcbiAgICAgIHAucHVzaChgLS1yZWdpc3RyeSBcIiR7cGFja2FnZUluZm8ucmVnaXN0cnl9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21tYW5kOiBzdHJpbmcgPVxuICAgICAgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJ1xuICAgICAgICA/IGBjZCBcIiR7cGF0aC5qb2luKFxuICAgICAgICAgICAgZGlzdCxcbiAgICAgICAgICAgIGZsYXRQYWNrYWdlTmFtZShwdWJsaXNoT3B0aW9uLm5hbWUpLFxuICAgICAgICAgICl9XCIgJiYgbnBtIHB1Ymxpc2ggJHtwLmpvaW4oJyAnKX1gXG4gICAgICAgIDogYGNkIFwiJHtwYXRoLmpvaW4oXG4gICAgICAgICAgICBkaXN0LFxuICAgICAgICAgICAgZmxhdFBhY2thZ2VOYW1lKHB1Ymxpc2hPcHRpb24ubmFtZSksXG4gICAgICAgICAgKX1cIjsgbnBtIHB1Ymxpc2ggJHtwLmpvaW4oJyAnKX07YDtcblxuICAgIGF3YWl0IG9uTWVzc2FnZSh7XG4gICAgICB0eXBlOiAnZXhlYycsXG4gICAgICBjb21tYW5kLFxuICAgICAgcHVibGlzaE9wdGlvbixcbiAgICB9KTtcbiAgfVxufVxuIl19