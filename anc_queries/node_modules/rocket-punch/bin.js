import { readLastArgv } from '@ssen/read-last-argv';
import path from 'path';
import * as process from 'process';
import yargs from 'yargs';
import { build } from './build';
import { doctor } from './doctor';
import { readEntry } from './entry/readEntry';
import { buildMessageHandler } from './message-handlers/build';
import { doctorMessageHandler } from './message-handlers/doctor';
import { publishMessageHandler } from './message-handlers/publish';
import { viewMessageHandler } from './message-handlers/view';
import { publish } from './publish';
import { view } from './view';
const cwd = process.cwd();
const commonOptions = {
    'emit': {
        type: 'boolean',
        default: true,
        describe: 'if you set this false it will only print options without run (e.g. --no-emit or --emit false)',
    },
    'source-root': {
        type: 'string',
        describe: 'source root (e.g. --source-root src)',
    },
};
const buildOptions = {
    'out-dir': {
        type: 'string',
        alias: 'o',
        describe: 'output directory (e.g. --out-dir out/packages)',
    },
    'show-packages-order': {
        type: 'boolean',
        default: false,
        describe: 'debug packages order',
    },
    'tsconfig': {
        type: 'string',
        alias: 't',
        describe: 'tsconfig file name (e.g. --tsconfig tsconfig.dev.json)',
    },
    'svg': {
        type: 'string',
        choices: ['create-react-app', 'default'],
        describe: 'svg compile type <default|create-react-app> (e.g. --svg default)',
    },
    'strict': {
        type: 'boolean',
        default: false,
        describe: 'if you set this true it will return exit 1 and stop build when there are tsc build warnings',
    },
};
const publishOptions = {
    'out-dir': buildOptions['out-dir'],
    'skip-selection': {
        type: 'boolean',
        alias: 's',
        describe: 'if true publish all packages without user selection',
    },
    'tag': {
        type: 'string',
        alias: 't',
        describe: 'npm publish --tag {tag}',
    },
    'access': {
        type: 'string',
        alias: 'a',
        describe: 'npm publish --access <public|private>',
    },
    'registry': {
        type: 'string',
        alias: 'r',
        describe: 'npm publish --registry {registry}',
    },
};
function toAbsolutePath(dir) {
    if (typeof dir !== 'string') {
        return undefined;
    }
    else if (path.isAbsolute(dir)) {
        return dir;
    }
    else {
        return path.join(cwd, dir);
    }
}
export function run() {
    return yargs
        .command({
        command: 'build',
        describe: 'Build packages',
        builder: (argv) => argv
            .options({
            ...buildOptions,
            ...commonOptions,
        })
            .example('$0 build --out-dir /some/directory', 'Build packages to specific directory')
            .example('$0 build --tsconfig tsconfig.build.json', 'Use another tsconfig.json file on build')
            .example('$0 build --svg default', 'SVG transform to `import ReactComponent from "./file.svg"`'),
        handler: (argv) => {
            const { emit, outDir, tsconfig, sourceRoot, svg, strict, showPackagesOrder, } = readLastArgv(argv);
            const params = {
                cwd,
                svg: svg === 'default' ? 'default' : 'create-react-app',
                dist: toAbsolutePath(outDir),
                showPackagesOrder: showPackagesOrder === true,
                tsconfig,
                sourceRoot,
                strict,
                entry: readEntry({ cwd }),
                onMessage: buildMessageHandler,
            };
            if (emit) {
                build(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'publish',
        describe: 'Publish packages',
        builder: (argv) => argv
            .options({
            ...publishOptions,
            ...commonOptions,
        })
            .example('$0 publish', 'Publish packages')
            .example('$0 publish --out-dir /some/directory', 'Publish packages from specific directory')
            .example('$0 publish --skip-selection', 'Publish all packages without user selection (e.g. CI)')
            .example('$0 publish --skip-selection --tag e2e --registry http://localhost:4873', 'E2E test'),
        handler: (argv) => {
            const { registry, outDir, sourceRoot, emit, access, skipSelection, tag, } = readLastArgv(argv);
            const params = {
                cwd,
                dist: toAbsolutePath(outDir),
                entry: readEntry({ cwd }),
                skipSelection,
                sourceRoot,
                tag,
                access: access === 'public' || access === 'private' ? access : undefined,
                registry,
                onMessage: publishMessageHandler,
            };
            if (emit) {
                publish(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'view',
        describe: 'View packages information',
        builder: (argv) => argv
            .options({ ...commonOptions })
            .example('$0 view', 'View packages information'),
        handler: (argv) => {
            const { emit, sourceRoot } = readLastArgv(argv);
            const params = {
                cwd,
                sourceRoot,
                entry: readEntry({ cwd }),
                onMessage: viewMessageHandler,
            };
            if (emit) {
                view(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .command({
        command: 'doctor',
        describe: 'Check configs is validate for rocket-punch',
        builder: (argv) => argv
            .options({ ...commonOptions })
            .example('$0 doctor', 'Check configs is validate for rocket-punch'),
        handler: (argv) => {
            const { emit, sourceRoot } = readLastArgv(argv);
            const params = {
                cwd,
                sourceRoot,
                entry: readEntry({ cwd }),
                onMessage: doctorMessageHandler,
            };
            if (emit) {
                doctor(params);
            }
            else {
                console.log(params);
            }
        },
    })
        .wrap(null)
        .help('h')
        .alias('h', 'help')
        .showHelpOnFail(true)
        .demandCommand()
        .recommendCommands()
        .strict()
        .epilog('ðŸš€ Rocket Punch!').argv;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9iaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEtBQTBCLE1BQU0sT0FBTyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sR0FBRyxHQUFXLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQVNsQyxNQUFNLGFBQWEsR0FBWTtJQUM3QixNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsU0FBUztRQUNmLE9BQU8sRUFBRSxJQUFJO1FBQ2IsUUFBUSxFQUNOLCtGQUErRjtLQUNsRztJQUNELGFBQWEsRUFBRTtRQUNiLElBQUksRUFBRSxRQUFRO1FBQ2QsUUFBUSxFQUFFLHNDQUFzQztLQUNqRDtDQUNGLENBQUM7QUFVRixNQUFNLFlBQVksR0FBWTtJQUM1QixTQUFTLEVB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QUFFLENBQUMsSUFBMkIsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hELE1BQU0sTUFBTSxHQUFpQjtnQkFDM0IsR0FBRztnQkFDSCxVQUFVO2dCQUNWLEtBQUssRUFBRSxTQUFTLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDekIsU0FBUyxFQUFFLG9CQUFvQjthQUNoQyxDQUFDO1lBRUYsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckI7UUFDSCxDQUFDO0tBQ0YsQ0FBQztTQUNELElBQUksQ0FBQyxJQUFJLENBQUM7U0FDVixJQUFJLENBQUMsR0FBRyxDQUFDO1NBQ1QsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7U0FDbEIsY0FBYyxDQUFDLElBQUksQ0FBQztTQUNwQixhQUFhLEVBQUU7U0FDZixpQkFBaUIsRUFBRTtTQUNuQixNQUFNLEVBQUU7U0FDUixNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRMYXN0QXJndiB9IGZyb20gJ0Bzc2VuL3JlYWQtbGFzdC1hcmd2JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB5YXJncywgeyBBcmd1bWVudHMsIEFyZ3YgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBidWlsZCB9IGZyb20gJy4vYnVpbGQnO1xuaW1wb3J0IHsgZG9jdG9yIH0gZnJvbSAnLi9kb2N0b3InO1xuaW1wb3J0IHsgcmVhZEVudHJ5IH0gZnJvbSAnLi9lbnRyeS9yZWFkRW50cnknO1xuaW1wb3J0IHsgYnVpbGRNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vbWVzc2FnZS1oYW5kbGVycy9idWlsZCc7XG5pbXBvcnQgeyBkb2N0b3JNZXNzYWdlSGFuZGxlciB9IGZyb20gJy4vbWVzc2FnZS1oYW5kbGVycy9kb2N0b3InO1xuaW1wb3J0IHsgcHVibGlzaE1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi9tZXNzYWdlLWhhbmRsZXJzL3B1Ymxpc2gnO1xuaW1wb3J0IHsgdmlld01lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi9tZXNzYWdlLWhhbmRsZXJzL3ZpZXcnO1xuaW1wb3J0IHsgQnVpbGRQYXJhbXMsIERvY3RvclBhcmFtcywgUHVibGlzaFBhcmFtcywgVmlld1BhcmFtcyB9IGZyb20gJy4vcGFyYW1zJztcbmltcG9ydCB7IHB1Ymxpc2ggfSBmcm9tICcuL3B1Ymxpc2gnO1xuaW1wb3J0IHsgdmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmNvbnN0IGN3ZDogc3RyaW5nID0gcHJvY2Vzcy5jd2QoKTtcblxudHlwZSBPcHRpb25zID0gUGFyYW1ldGVyczxBcmd2WydvcHRpb25zJ10+WzBdO1xuXG50eXBlIENvbW1vbkFyZ3MgPSB7XG4gIGVtaXQ/OiBib29sZWFuO1xuICBzb3VyY2VSb290Pzogc3RyaW5nO1xufTtcblxuY29uc3QgY29tbW9uT3B0aW9uczogT3B0aW9ucyA9IHtcbiAgJ2VtaXQnOiB7XG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgZGVzY3JpYmU6XG4gICAgICAnaWYgeW91IHNldCB0aGlzIGZhbHNlIGl0IHdpbGwgb25seSBwcmludCBvcHRpb25zIHdpdGhvdXQgcnVuIChlLmcuIC0tbm8tZW1pdCBvciAtLWVtaXQgZmFsc2UpJyxcbiAgfSxcbiAgJ3NvdXJjZS1yb290Jzoge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlc2NyaWJlOiAnc291cmNlIHJvb3QgKGUuZy4gLS1zb3VyY2Utcm9vdCBzcmMpJyxcbiAgfSxcbn07XG5cbnR5cGUgQnVpbGRBcmdzID0ge1xuICBvdXREaXI/OiBzdHJpbmc7XG4gIHRzY29uZmlnPzogc3RyaW5nO1xuICBzdmc/OiBzdHJpbmc7XG4gIHN0cmljdD86IGJvb2xlYW47XG4gIHNob3dQYWNrYWdlc09yZGVyPzogYm9vbGVhbjtcbn07XG5cbmNvbnN0IGJ1aWxkT3B0aW9uczogT3B0aW9ucyA9IHtcbiAgJ291dC1kaXInOiB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgYWxpYXM6ICdvJyxcbiAgICBkZXNjcmliZTogJ291dHB1dCBkaXJlY3RvcnkgKGUuZy4gLS1vdXQtZGlyIG91dC9wYWNrYWdlcyknLFxuICB9LFxuICAnc2hvdy1wYWNrYWdlcy1vcmRlcic6IHtcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgZGVzY3JpYmU6ICdkZWJ1ZyBwYWNrYWdlcyBvcmRlcicsXG4gIH0sXG4gICd0c2NvbmZpZyc6IHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBhbGlhczogJ3QnLFxuICAgIGRlc2NyaWJlOiAndHNjb25maWcgZmlsZSBuYW1lIChlLmcuIC0tdHNjb25maWcgdHNjb25maWcuZGV2Lmpzb24pJyxcbiAgfSxcbiAgJ3N2Zyc6IHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBjaG9pY2VzOiBbJ2NyZWF0ZS1yZWFjdC1hcHAnLCAnZGVmYXVsdCddLFxuICAgIGRlc2NyaWJlOlxuICAgICAgJ3N2ZyBjb21waWxlIHR5cGUgPGRlZmF1bHR8Y3JlYXRlLXJlYWN0LWFwcD4gKGUuZy4gLS1zdmcgZGVmYXVsdCknLFxuICB9LFxuICAnc3RyaWN0Jzoge1xuICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBkZXNjcmliZTpcbiAgICAgICdpZiB5b3Ugc2V0IHRoaXMgdHJ1ZSBpdCB3aWxsIHJldHVybiBleGl0IDEgYW5kIHN0b3AgYnVpbGQgd2hlbiB0aGVyZSBhcmUgdHNjIGJ1aWxkIHdhcm5pbmdzJyxcbiAgfSxcbn07XG5cbnR5cGUgUHVibGlzaEFyZ3MgPSB7XG4gIG91dERpcj86IHN0cmluZztcbiAgc2tpcFNlbGVjdGlvbj86IGJvb2xlYW47XG4gIHRhZz86IHN0cmluZztcbiAgYWNjZXNzPzogc3RyaW5nO1xuICByZWdpc3RyeT86IHN0cmluZztcbn07XG5cbmNvbnN0IHB1Ymxpc2hPcHRpb25zOiBPcHRpb25zID0ge1xuICAnb3V0LWRpcic6IGJ1aWxkT3B0aW9uc1snb3V0LWRpciddLFxuICAnc2tpcC1zZWxlY3Rpb24nOiB7XG4gICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgIGFsaWFzOiAncycsXG4gICAgZGVzY3JpYmU6ICdpZiB0cnVlIHB1Ymxpc2ggYWxsIHBhY2thZ2VzIHdpdGhvdXQgdXNlciBzZWxlY3Rpb24nLFxuICB9LFxuICAndGFnJzoge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGFsaWFzOiAndCcsXG4gICAgZGVzY3JpYmU6ICducG0gcHVibGlzaCAtLXRhZyB7dGFnfScsXG4gIH0sXG4gICdhY2Nlc3MnOiB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgYWxpYXM6ICdhJyxcbiAgICBkZXNjcmliZTogJ25wbSBwdWJsaXNoIC0tYWNjZXNzIDxwdWJsaWN8cHJpdmF0ZT4nLFxuICB9LFxuICAncmVnaXN0cnknOiB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgYWxpYXM6ICdyJyxcbiAgICBkZXNjcmliZTogJ25wbSBwdWJsaXNoIC0tcmVnaXN0cnkge3JlZ2lzdHJ5fScsXG4gIH0sXG59O1xuXG5mdW5jdGlvbiB0b0Fic29sdXRlUGF0aChkaXI6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgZGlyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAocGF0aC5pc0Fic29sdXRlKGRpcikpIHtcbiAgICByZXR1cm4gZGlyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXRoLmpvaW4oY3dkLCBkaXIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydW4oKSB7XG4gIHJldHVybiB5YXJnc1xuICAgIC5jb21tYW5kKHtcbiAgICAgIGNvbW1hbmQ6ICdidWlsZCcsXG4gICAgICBkZXNjcmliZTogJ0J1aWxkIHBhY2thZ2VzJyxcbiAgICAgIGJ1aWxkZXI6IChhcmd2KSA9PlxuICAgICAgICBhcmd2XG4gICAgICAgICAgLm9wdGlvbnMoe1xuICAgICAgICAgICAgLi4uYnVpbGRPcHRpb25zLFxuICAgICAgICAgICAgLi4uY29tbW9uT3B0aW9ucyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5leGFtcGxlKFxuICAgICAgICAgICAgJyQwIGJ1aWxkIC0tb3V0LWRpciAvc29tZS9kaXJlY3RvcnknLFxuICAgICAgICAgICAgJ0J1aWxkIHBhY2thZ2VzIHRvIHNwZWNpZmljIGRpcmVjdG9yeScsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5leGFtcGxlKFxuICAgICAgICAgICAgJyQwIGJ1aWxkIC0tdHNjb25maWcgdHNjb25maWcuYnVpbGQuanNvbicsXG4gICAgICAgICAgICAnVXNlIGFub3RoZXIgdHNjb25maWcuanNvbiBmaWxlIG9uIGJ1aWxkJyxcbiAgICAgICAgICApXG4gICAgICAgICAgLmV4YW1wbGUoXG4gICAgICAgICAgICAnJDAgYnVpbGQgLS1zdmcgZGVmYXVsdCcsXG4gICAgICAgICAgICAnU1ZHIHRyYW5zZm9ybSB0byBgaW1wb3J0IFJlYWN0Q29tcG9uZW50IGZyb20gXCIuL2ZpbGUuc3ZnXCJgJyxcbiAgICAgICAgICApLFxuICAgICAgaGFuZGxlcjogKGFyZ3Y6IEFyZ3VtZW50czxDb21tb25BcmdzICYgQnVpbGRBcmdzPikgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZW1pdCxcbiAgICAgICAgICBvdXREaXIsXG4gICAgICAgICAgdHNjb25maWcsXG4gICAgICAgICAgc291cmNlUm9vdCxcbiAgICAgICAgICBzdmcsXG4gICAgICAgICAgc3RyaWN0LFxuICAgICAgICAgIHNob3dQYWNrYWdlc09yZGVyLFxuICAgICAgICB9ID0gcmVhZExhc3RBcmd2KGFyZ3YpO1xuICAgICAgICBjb25zdCBwYXJhbXM6IEJ1aWxkUGFyYW1zID0ge1xuICAgICAgICAgIGN3ZCxcbiAgICAgICAgICBzdmc6IHN2ZyA9PT0gJ2RlZmF1bHQnID8gJ2RlZmF1bHQnIDogJ2NyZWF0ZS1yZWFjdC1hcHAnLFxuICAgICAgICAgIGRpc3Q6IHRvQWJzb2x1dGVQYXRoKG91dERpciksXG4gICAgICAgICAgc2hvd1BhY2thZ2VzT3JkZXI6IHNob3dQYWNrYWdlc09yZGVyID09PSB0cnVlLFxuICAgICAgICAgIHRzY29uZmlnLFxuICAgICAgICAgIHNvdXJjZVJvb3QsXG4gICAgICAgICAgc3RyaWN0LFxuICAgICAgICAgIGVudHJ5OiByZWFkRW50cnkoeyBjd2QgfSksXG4gICAgICAgICAgb25NZXNzYWdlOiBidWlsZE1lc3NhZ2VIYW5kbGVyLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbWl0KSB7XG4gICAgICAgICAgYnVpbGQocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pXG4gICAgLmNvbW1hbmQoe1xuICAgICAgY29tbWFuZDogJ3B1Ymxpc2gnLFxuICAgICAgZGVzY3JpYmU6ICdQdWJsaXNoIHBhY2thZ2VzJyxcbiAgICAgIGJ1aWxkZXI6IChhcmd2KSA9PlxuICAgICAgICBhcmd2XG4gICAgICAgICAgLm9wdGlvbnMoe1xuICAgICAgICAgICAgLi4ucHVibGlzaE9wdGlvbnMsXG4gICAgICAgICAgICAuLi5jb21tb25PcHRpb25zLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmV4YW1wbGUoJyQwIHB1Ymxpc2gnLCAnUHVibGlzaCBwYWNrYWdlcycpXG4gICAgICAgICAgLmV4YW1wbGUoXG4gICAgICAgICAgICAnJDAgcHVibGlzaCAtLW91dC1kaXIgL3NvbWUvZGlyZWN0b3J5JyxcbiAgICAgICAgICAgICdQdWJsaXNoIHBhY2thZ2VzIGZyb20gc3BlY2lmaWMgZGlyZWN0b3J5JyxcbiAgICAgICAgICApXG4gICAgICAgICAgLmV4YW1wbGUoXG4gICAgICAgICAgICAnJDAgcHVibGlzaCAtLXNraXAtc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICdQdWJsaXNoIGFsbCBwYWNrYWdlcyB3aXRob3V0IHVzZXIgc2VsZWN0aW9uIChlLmcuIENJKScsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5leGFtcGxlKFxuICAgICAgICAgICAgJyQwIHB1Ymxpc2ggLS1za2lwLXNlbGVjdGlvbiAtLXRhZyBlMmUgLS1yZWdpc3RyeSBodHRwOi8vbG9jYWxob3N0OjQ4NzMnLFxuICAgICAgICAgICAgJ0UyRSB0ZXN0JyxcbiAgICAgICAgICApLFxuICAgICAgaGFuZGxlcjogKGFyZ3Y6IEFyZ3VtZW50czxDb21tb25BcmdzICYgUHVibGlzaEFyZ3M+KSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICByZWdpc3RyeSxcbiAgICAgICAgICBvdXREaXIsXG4gICAgICAgICAgc291cmNlUm9vdCxcbiAgICAgICAgICBlbWl0LFxuICAgICAgICAgIGFjY2VzcyxcbiAgICAgICAgICBza2lwU2VsZWN0aW9uLFxuICAgICAgICAgIHRhZyxcbiAgICAgICAgfSA9IHJlYWRMYXN0QXJndihhcmd2KTtcbiAgICAgICAgY29uc3QgcGFyYW1zOiBQdWJsaXNoUGFyYW1zID0ge1xuICAgICAgICAgIGN3ZCxcbiAgICAgICAgICBkaXN0OiB0b0Fic29sdXRlUGF0aChvdXREaXIpLFxuICAgICAgICAgIGVudHJ5OiByZWFkRW50cnkoeyBjd2QgfSksXG4gICAgICAgICAgc2tpcFNlbGVjdGlvbixcbiAgICAgICAgICBzb3VyY2VSb290LFxuICAgICAgICAgIHRhZyxcbiAgICAgICAgICBhY2Nlc3M6XG4gICAgICAgICAgICBhY2Nlc3MgPT09ICdwdWJsaWMnIHx8IGFjY2VzcyA9PT0gJ3ByaXZhdGUnID8gYWNjZXNzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlZ2lzdHJ5LFxuICAgICAgICAgIG9uTWVzc2FnZTogcHVibGlzaE1lc3NhZ2VIYW5kbGVyLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbWl0KSB7XG4gICAgICAgICAgcHVibGlzaChwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSlcbiAgICAuY29tbWFuZCh7XG4gICAgICBjb21tYW5kOiAndmlldycsXG4gICAgICBkZXNjcmliZTogJ1ZpZXcgcGFja2FnZXMgaW5mb3JtYXRpb24nLFxuICAgICAgYnVpbGRlcjogKGFyZ3YpID0+XG4gICAgICAgIGFyZ3ZcbiAgICAgICAgICAub3B0aW9ucyh7IC4uLmNvbW1vbk9wdGlvbnMgfSlcbiAgICAgICAgICAuZXhhbXBsZSgnJDAgdmlldycsICdWaWV3IHBhY2thZ2VzIGluZm9ybWF0aW9uJyksXG4gICAgICBoYW5kbGVyOiAoYXJndjogQXJndW1lbnRzPENvbW1vbkFyZ3M+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZW1pdCwgc291cmNlUm9vdCB9ID0gcmVhZExhc3RBcmd2KGFyZ3YpO1xuICAgICAgICBjb25zdCBwYXJhbXM6IFZpZXdQYXJhbXMgPSB7XG4gICAgICAgICAgY3dkLFxuICAgICAgICAgIHNvdXJjZVJvb3QsXG4gICAgICAgICAgZW50cnk6IHJlYWRFbnRyeSh7IGN3ZCB9KSxcbiAgICAgICAgICBvbk1lc3NhZ2U6IHZpZXdNZXNzYWdlSGFuZGxlcixcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZW1pdCkge1xuICAgICAgICAgIHZpZXcocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pXG4gICAgLmNvbW1hbmQoe1xuICAgICAgY29tbWFuZDogJ2RvY3RvcicsXG4gICAgICBkZXNjcmliZTogJ0NoZWNrIGNvbmZpZ3MgaXMgdmFsaWRhdGUgZm9yIHJvY2tldC1wdW5jaCcsXG4gICAgICBidWlsZGVyOiAoYXJndikgPT5cbiAgICAgICAgYXJndlxuICAgICAgICAgIC5vcHRpb25zKHsgLi4uY29tbW9uT3B0aW9ucyB9KVxuICAgICAgICAgIC5leGFtcGxlKCckMCBkb2N0b3InLCAnQ2hlY2sgY29uZmlncyBpcyB2YWxpZGF0ZSBmb3Igcm9ja2V0LXB1bmNoJyksXG4gICAgICBoYW5kbGVyOiAoYXJndjogQXJndW1lbnRzPENvbW1vbkFyZ3M+KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgZW1pdCwgc291cmNlUm9vdCB9ID0gcmVhZExhc3RBcmd2KGFyZ3YpO1xuICAgICAgICBjb25zdCBwYXJhbXM6IERvY3RvclBhcmFtcyA9IHtcbiAgICAgICAgICBjd2QsXG4gICAgICAgICAgc291cmNlUm9vdCxcbiAgICAgICAgICBlbnRyeTogcmVhZEVudHJ5KHsgY3dkIH0pLFxuICAgICAgICAgIG9uTWVzc2FnZTogZG9jdG9yTWVzc2FnZUhhbmRsZXIsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGVtaXQpIHtcbiAgICAgICAgICBkb2N0b3IocGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pXG4gICAgLndyYXAobnVsbClcbiAgICAuaGVscCgnaCcpXG4gICAgLmFsaWFzKCdoJywgJ2hlbHAnKVxuICAgIC5zaG93SGVscE9uRmFpbCh0cnVlKVxuICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAucmVjb21tZW5kQ29tbWFuZHMoKVxuICAgIC5zdHJpY3QoKVxuICAgIC5lcGlsb2coJ/CfmoAgUm9ja2V0IFB1bmNoIScpLmFyZ3Y7XG59XG4iXX0=