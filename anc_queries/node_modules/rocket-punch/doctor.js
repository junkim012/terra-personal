import { readTSConfig } from '@ssen/read-tsconfig';
import depcheck from 'depcheck';
import path from 'path';
import process from 'process';
import { readPackages } from './entry/readPackages';
import { doctorMessageHandler } from './message-handlers/doctor';
export async function doctor({ cwd = process.cwd(), entry, sourceRoot = 'src', tsconfig = 'tsconfig.json', onMessage = doctorMessageHandler, }) {
    var _a;
    const internalPackages = await readPackages({
        cwd,
        sourceRoot,
        entry,
    });
    const depcheckResult = await depcheck(cwd, {
        ignoreMatches: [
            ...Array.from(internalPackages.values()).map(({ name }) => name),
        ],
    });
    await onMessage({
        type: 'depcheck',
        result: depcheckResult,
    });
    const { options } = readTSConfig(path.join(cwd, tsconfig));
    const tsconfigResult = [];
    // TODO src to be user configurable
    if (!/src$/.test((_a = options.baseUrl) !== null && _a !== void 0 ? _a : '')) {
        tsconfigResult.push({
            message: `compilerOptions.baseUrl should be "src".`,
            fixer: {
                compilerOptions: {
                    baseUrl: 'src',
                },
            },
        });
    }
    if (tsconfigResult.length > 0) {
        await onMessage({
            type: 'tsconfig',
            result: tsconfigResult,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9kb2N0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sUUFBUSxNQUFNLFVBQVUsQ0FBQztBQUNoQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUlqRSxNQUFNLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxFQUMzQixHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNuQixLQUFLLEVBQ0wsVUFBVSxHQUFHLEtBQUssRUFDbEIsUUFBUSxHQUFHLGVBQWUsRUFDMUIsU0FBUyxHQUFHLG9CQUFvQixHQUNuQjs7SUFDYixNQUFNLGdCQUFnQixHQUE2QixNQUFNLFlBQVksQ0FBQztRQUNwRSxHQUFHO1FBQ0gsVUFBVTtRQUNWLEtBQUs7S0FDTixDQUFDLENBQUM7SUFFSCxNQUFNLGNBQWMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDekMsYUFBYSxFQUFFO1lBQ2IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQ2pFO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxTQUFTLENBQUM7UUFDZCxJQUFJLEVBQUUsVUFBVTtRQUNoQixNQUFNLEVBQUUsY0FBYztLQUN2QixDQUFDLENBQUM7SUFFSCxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxjQUFjLEdBQXlDLEVBQUUsQ0FBQztJQUVoRSxtQ0FBbUM7SUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBQSxPQUFPLENBQUMsT0FBTyxtQ0FBSSxFQUFFLENBQUMsRUFBRTtRQUN2QyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ2xCLE9BQU8sRUFBRSwwQ0FBMEM7WUFDbkQsS0FBSyxFQUFFO2dCQUNMLGVBQWUsRUFBRTtvQkFDZixPQUFPLEVBQUUsS0FBSztpQkFDZjthQUNGO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQzdCLE1BQU0sU0FBUyxDQUFDO1lBQ2QsSUFBSSxFQUFFLFVBQVU7WUFDaEIsTUFBTSxFQUFFLGNBQWM7U0FDdkIsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZFRTQ29uZmlnIH0gZnJvbSAnQHNzZW4vcmVhZC10c2NvbmZpZyc7XG5pbXBvcnQgZGVwY2hlY2sgZnJvbSAnZGVwY2hlY2snO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlcyB9IGZyb20gJy4vZW50cnkvcmVhZFBhY2thZ2VzJztcbmltcG9ydCB7IGRvY3Rvck1lc3NhZ2VIYW5kbGVyIH0gZnJvbSAnLi9tZXNzYWdlLWhhbmRsZXJzL2RvY3Rvcic7XG5pbXBvcnQgeyBEb2N0b3JQYXJhbXMgfSBmcm9tICcuL3BhcmFtcyc7XG5pbXBvcnQgeyBQYWNrYWdlSW5mbyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9jdG9yKHtcbiAgY3dkID0gcHJvY2Vzcy5jd2QoKSxcbiAgZW50cnksXG4gIHNvdXJjZVJvb3QgPSAnc3JjJyxcbiAgdHNjb25maWcgPSAndHNjb25maWcuanNvbicsXG4gIG9uTWVzc2FnZSA9IGRvY3Rvck1lc3NhZ2VIYW5kbGVyLFxufTogRG9jdG9yUGFyYW1zKSB7XG4gIGNvbnN0IGludGVybmFsUGFja2FnZXM6IE1hcDxzdHJpbmcsIFBhY2thZ2VJbmZvPiA9IGF3YWl0IHJlYWRQYWNrYWdlcyh7XG4gICAgY3dkLFxuICAgIHNvdXJjZVJvb3QsXG4gICAgZW50cnksXG4gIH0pO1xuXG4gIGNvbnN0IGRlcGNoZWNrUmVzdWx0ID0gYXdhaXQgZGVwY2hlY2soY3dkLCB7XG4gICAgaWdub3JlTWF0Y2hlczogW1xuICAgICAgLi4uQXJyYXkuZnJvbShpbnRlcm5hbFBhY2thZ2VzLnZhbHVlcygpKS5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKSxcbiAgICBdLFxuICB9KTtcblxuICBhd2FpdCBvbk1lc3NhZ2Uoe1xuICAgIHR5cGU6ICdkZXBjaGVjaycsXG4gICAgcmVzdWx0OiBkZXBjaGVja1Jlc3VsdCxcbiAgfSk7XG5cbiAgY29uc3QgeyBvcHRpb25zIH0gPSByZWFkVFNDb25maWcocGF0aC5qb2luKGN3ZCwgdHNjb25maWcpKTtcbiAgY29uc3QgdHNjb25maWdSZXN1bHQ6IHsgbWVzc2FnZTogc3RyaW5nOyBmaXhlcjogb2JqZWN0IH1bXSA9IFtdO1xuXG4gIC8vIFRPRE8gc3JjIHRvIGJlIHVzZXIgY29uZmlndXJhYmxlXG4gIGlmICghL3NyYyQvLnRlc3Qob3B0aW9ucy5iYXNlVXJsID8/ICcnKSkge1xuICAgIHRzY29uZmlnUmVzdWx0LnB1c2goe1xuICAgICAgbWVzc2FnZTogYGNvbXBpbGVyT3B0aW9ucy5iYXNlVXJsIHNob3VsZCBiZSBcInNyY1wiLmAsXG4gICAgICBmaXhlcjoge1xuICAgICAgICBjb21waWxlck9wdGlvbnM6IHtcbiAgICAgICAgICBiYXNlVXJsOiAnc3JjJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBpZiAodHNjb25maWdSZXN1bHQubGVuZ3RoID4gMCkge1xuICAgIGF3YWl0IG9uTWVzc2FnZSh7XG4gICAgICB0eXBlOiAndHNjb25maWcnLFxuICAgICAgcmVzdWx0OiB0c2NvbmZpZ1Jlc3VsdCxcbiAgICB9KTtcbiAgfVxufVxuIl19