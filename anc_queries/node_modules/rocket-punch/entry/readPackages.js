import fs from 'fs-extra';
import path from 'path';
export async function readPackages({ cwd, sourceRoot, entry, }) {
    const packages = {};
    for (const name of Object.keys(entry)) {
        if (/\/\*$/.test(name)) {
            const groupName = name.split('/')[0];
            const dir = path.resolve(cwd, sourceRoot, groupName);
            const files = await fs.readdir(dir);
            for (const pkgName of files) {
                const pkgDir = path.join(dir, pkgName);
                const groupAndPkgName = groupName + '/' + pkgName;
                if (fs.statSync(pkgDir).isDirectory() &&
                    fs.readdirSync(pkgDir).length > 0 &&
                    !packages[groupAndPkgName]) {
                    packages[groupName + '/' + pkgName] = entry[name];
                }
            }
        }
        else if (!packages[name]) {
            packages[name] = entry[name];
        }
    }
    return Object.keys(packages).reduce((map, name) => {
        var _a, _b, _c, _d;
        const versionOrInfo = packages[name];
        if (typeof versionOrInfo === 'string') {
            map.set(name, {
                name,
                version: versionOrInfo,
                tag: 'latest',
                //module: 'esm',
                exports: {
                    main: 'module',
                    module: true,
                    commonjs: true,
                },
                access: undefined,
                registry: undefined,
                compilerOptions: {},
                packageJson: {},
            });
        }
        else {
            const exports = (_a = versionOrInfo.exports) !== null && _a !== void 0 ? _a : ['module', 'commonjs'];
            const commonjsExists = Array.from(exports).includes('commonjs');
            const moduleExists = Array.from(exports).includes('module');
            if (!commonjsExists && !moduleExists) {
                throw new Error(`there are no exports! ${versionOrInfo.exports}`);
            }
            const main = exports[0];
            if (!main) {
                throw new Error(`can't resolve main`);
            }
            map.set(name, {
                name,
                version: versionOrInfo.version,
                tag: (_b = versionOrInfo.tag) !== null && _b !== void 0 ? _b : 'latest',
                //module: versionOrInfo.module === 'esm' ? 'esm' : 'commonjs',
                exports: {
                    main,
                    module: moduleExists,
                    commonjs: commonjsExists,
                },
                access: versionOrInfo.access,
                registry: versionOrInfo.registry,
                compilerOptions: (_c = versionOrInfo.compilerOptions) !== null && _c !== void 0 ? _c : {},
                packageJson: (_d = versionOrInfo.packageJson) !== null && _d !== void 0 ? _d : {},
            });
        }
        return map;
    }, new Map());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZFBhY2thZ2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9lbnRyeS9yZWFkUGFja2FnZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzFCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQVN4QixNQUFNLENBQUMsS0FBSyxVQUFVLFlBQVksQ0FBQyxFQUNqQyxHQUFHLEVBQ0gsVUFBVSxFQUNWLEtBQUssR0FDRTtJQUNQLE1BQU0sUUFBUSxHQUEyQyxFQUFFLENBQUM7SUFFNUQsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3JDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QixNQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM3RCxNQUFNLEtBQUssR0FBYSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFOUMsS0FBSyxNQUFNLE9BQU8sSUFBSSxLQUFLLEVBQUU7Z0JBQzNCLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUMvQyxNQUFNLGVBQWUsR0FBVyxTQUFTLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztnQkFDMUQsSUFDRSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRTtvQkFDakMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQztvQkFDakMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQzFCO29CQUNBLFFBQVEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkQ7YUFDRjtTQUNGO2FBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO0tBQ0Y7SUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFOztRQUNoRCxNQUFNLGFBQWEsR0FBMkIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdELElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1lBQ3JDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO2dCQUNaLElBQUk7Z0JBQ0osT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLEdBQUcsRUFBRSxRQUFRO2dCQUNiLGdCQUFnQjtnQkFDaEIsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxRQUFRO29CQUNkLE1BQU0sRUFBRSxJQUFJO29CQUNaLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2dCQUNELE1BQU0sRUFBRSxTQUFTO2dCQUNqQixRQUFRLEVBQUUsU0FBUztnQkFDbkIsZUFBZSxFQUFFLEVBQUU7Z0JBQ25CLFdBQVcsRUFBRSxFQUFFO2FBQ2hCLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxNQUFNLE9BQU8sR0FBRyxNQUFBLGFBQWEsQ0FBQyxPQUFPLG1DQUFJLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRWhFLE1BQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWhFLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRTVELElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2FBQ25FO1lBRUQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXhCLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2FBQ3ZDO1lBRUQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osSUFBSTtnQkFDSixPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU87Z0JBQzlCLEdBQUcsRUFBRSxNQUFBLGFBQWEsQ0FBQyxHQUFHLG1DQUFJLFFBQVE7Z0JBQ2xDLDhEQUE4RDtnQkFDOUQsT0FBTyxFQUFFO29CQUNQLElBQUk7b0JBQ0osTUFBTSxFQUFFLFlBQVk7b0JBQ3BCLFFBQVEsRUFBRSxjQUFjO2lCQUN6QjtnQkFDRCxNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU07Z0JBQzVCLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUTtnQkFDaEMsZUFBZSxFQUFFLE1BQUEsYUFBYSxDQUFDLGVBQWUsbUNBQUksRUFBRTtnQkFDcEQsV0FBVyxFQUFFLE1BQUEsYUFBYSxDQUFDLFdBQVcsbUNBQUksRUFBRTthQUM3QyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLElBQUksR0FBRyxFQUF1QixDQUFDLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFBhY2thZ2VDb25maWcsIFBhY2thZ2VJbmZvIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgY3dkOiBzdHJpbmc7XG4gIHNvdXJjZVJvb3Q6IHN0cmluZztcbiAgZW50cnk6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IFBhY2thZ2VDb25maWc+O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZFBhY2thZ2VzKHtcbiAgY3dkLFxuICBzb3VyY2VSb290LFxuICBlbnRyeSxcbn06IFBhcmFtcyk6IFByb21pc2U8TWFwPHN0cmluZywgUGFja2FnZUluZm8+PiB7XG4gIGNvbnN0IHBhY2thZ2VzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBQYWNrYWdlQ29uZmlnPiA9IHt9O1xuXG4gIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhlbnRyeSkpIHtcbiAgICBpZiAoL1xcL1xcKiQvLnRlc3QobmFtZSkpIHtcbiAgICAgIGNvbnN0IGdyb3VwTmFtZTogc3RyaW5nID0gbmFtZS5zcGxpdCgnLycpWzBdO1xuICAgICAgY29uc3QgZGlyOiBzdHJpbmcgPSBwYXRoLnJlc29sdmUoY3dkLCBzb3VyY2VSb290LCBncm91cE5hbWUpO1xuICAgICAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gYXdhaXQgZnMucmVhZGRpcihkaXIpO1xuXG4gICAgICBmb3IgKGNvbnN0IHBrZ05hbWUgb2YgZmlsZXMpIHtcbiAgICAgICAgY29uc3QgcGtnRGlyOiBzdHJpbmcgPSBwYXRoLmpvaW4oZGlyLCBwa2dOYW1lKTtcbiAgICAgICAgY29uc3QgZ3JvdXBBbmRQa2dOYW1lOiBzdHJpbmcgPSBncm91cE5hbWUgKyAnLycgKyBwa2dOYW1lO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZnMuc3RhdFN5bmMocGtnRGlyKS5pc0RpcmVjdG9yeSgpICYmXG4gICAgICAgICAgZnMucmVhZGRpclN5bmMocGtnRGlyKS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgIXBhY2thZ2VzW2dyb3VwQW5kUGtnTmFtZV1cbiAgICAgICAgKSB7XG4gICAgICAgICAgcGFja2FnZXNbZ3JvdXBOYW1lICsgJy8nICsgcGtnTmFtZV0gPSBlbnRyeVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXBhY2thZ2VzW25hbWVdKSB7XG4gICAgICBwYWNrYWdlc1tuYW1lXSA9IGVudHJ5W25hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhwYWNrYWdlcykucmVkdWNlKChtYXAsIG5hbWUpID0+IHtcbiAgICBjb25zdCB2ZXJzaW9uT3JJbmZvOiBzdHJpbmcgfCBQYWNrYWdlQ29uZmlnID0gcGFja2FnZXNbbmFtZV07XG5cbiAgICBpZiAodHlwZW9mIHZlcnNpb25PckluZm8gPT09ICdzdHJpbmcnKSB7XG4gICAgICBtYXAuc2V0KG5hbWUsIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbk9ySW5mbyxcbiAgICAgICAgdGFnOiAnbGF0ZXN0JyxcbiAgICAgICAgLy9tb2R1bGU6ICdlc20nLFxuICAgICAgICBleHBvcnRzOiB7XG4gICAgICAgICAgbWFpbjogJ21vZHVsZScsXG4gICAgICAgICAgbW9kdWxlOiB0cnVlLFxuICAgICAgICAgIGNvbW1vbmpzOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBhY2Nlc3M6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVnaXN0cnk6IHVuZGVmaW5lZCxcbiAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7fSxcbiAgICAgICAgcGFja2FnZUpzb246IHt9LFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGV4cG9ydHMgPSB2ZXJzaW9uT3JJbmZvLmV4cG9ydHMgPz8gWydtb2R1bGUnLCAnY29tbW9uanMnXTtcblxuICAgICAgY29uc3QgY29tbW9uanNFeGlzdHMgPSBBcnJheS5mcm9tKGV4cG9ydHMpLmluY2x1ZGVzKCdjb21tb25qcycpO1xuXG4gICAgICBjb25zdCBtb2R1bGVFeGlzdHMgPSBBcnJheS5mcm9tKGV4cG9ydHMpLmluY2x1ZGVzKCdtb2R1bGUnKTtcblxuICAgICAgaWYgKCFjb21tb25qc0V4aXN0cyAmJiAhbW9kdWxlRXhpc3RzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdGhlcmUgYXJlIG5vIGV4cG9ydHMhICR7dmVyc2lvbk9ySW5mby5leHBvcnRzfWApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtYWluID0gZXhwb3J0c1swXTtcblxuICAgICAgaWYgKCFtYWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2FuJ3QgcmVzb2x2ZSBtYWluYCk7XG4gICAgICB9XG5cbiAgICAgIG1hcC5zZXQobmFtZSwge1xuICAgICAgICBuYW1lLFxuICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uT3JJbmZvLnZlcnNpb24sXG4gICAgICAgIHRhZzogdmVyc2lvbk9ySW5mby50YWcgPz8gJ2xhdGVzdCcsXG4gICAgICAgIC8vbW9kdWxlOiB2ZXJzaW9uT3JJbmZvLm1vZHVsZSA9PT0gJ2VzbScgPyAnZXNtJyA6ICdjb21tb25qcycsXG4gICAgICAgIGV4cG9ydHM6IHtcbiAgICAgICAgICBtYWluLFxuICAgICAgICAgIG1vZHVsZTogbW9kdWxlRXhpc3RzLFxuICAgICAgICAgIGNvbW1vbmpzOiBjb21tb25qc0V4aXN0cyxcbiAgICAgICAgfSxcbiAgICAgICAgYWNjZXNzOiB2ZXJzaW9uT3JJbmZvLmFjY2VzcyxcbiAgICAgICAgcmVnaXN0cnk6IHZlcnNpb25PckluZm8ucmVnaXN0cnksXG4gICAgICAgIGNvbXBpbGVyT3B0aW9uczogdmVyc2lvbk9ySW5mby5jb21waWxlck9wdGlvbnMgPz8ge30sXG4gICAgICAgIHBhY2thZ2VKc29uOiB2ZXJzaW9uT3JJbmZvLnBhY2thZ2VKc29uID8/IHt9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcDtcbiAgfSwgbmV3IE1hcDxzdHJpbmcsIFBhY2thZ2VJbmZvPigpKTtcbn1cbiJdfQ==