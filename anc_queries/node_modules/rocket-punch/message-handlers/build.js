import ts from 'typescript';
import chalk from 'chalk';
export async function buildMessageHandler(message) {
    switch (message.type) {
        case 'begin':
            console.log(chalk.bold(`Build "${message.packageName}"`));
            console.log('');
            break;
        case 'tsc':
            for (const diagnostic of message.diagnostics) {
                if (diagnostic.file && diagnostic.start) {
                    const { line, character, } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const diagnosticMessage = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    console.log(chalk.yellow(`TS${diagnostic.code} : ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${diagnosticMessage}`));
                }
                else {
                    console.log(chalk.yellow(`TS${diagnostic.code} : ${ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n')}`));
                }
            }
            break;
        case 'package-json':
            console.log(chalk.gray(JSON.stringify(message.packageJson, null, 2)));
            console.log('');
            break;
        case 'success':
            console.log(chalk.blueBright(`üëç ${message.packageName}@${message.packageJson.version} ‚Üí ${message.outDir}`));
            console.log('');
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcm9ja2V0LXB1bmNoL21lc3NhZ2UtaGFuZGxlcnMvYnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzVCLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUFDLE9BQXNCO0lBQzlELFFBQVEsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNwQixLQUFLLE9BQU87WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsTUFBTTtRQUNSLEtBQUssS0FBSztZQUNSLEtBQUssTUFBTSxVQUFVLElBQUksT0FBTyxDQUFDLFdBQVcsRUFBRTtnQkFDNUMsSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7b0JBQ3ZDLE1BQU0sRUFDSixJQUFJLEVBQ0osU0FBUyxHQUNWLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3BFLE1BQU0saUJBQWlCLEdBQVcsRUFBRSxDQUFDLDRCQUE0QixDQUMvRCxVQUFVLENBQUMsV0FBVyxFQUN0QixJQUFJLENBQ0wsQ0FBQztvQkFDRixPQUFPLENBQUMsR0FBRyxDQUNULEtBQUssQ0FBQyxNQUFNLENBQ1YsS0FBSyxVQUFVLENBQUMsSUFBSSxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUNoRCxJQUFJLEdBQUcsQ0FDVCxJQUFJLFNBQVMsR0FBRyxDQUFDLE1BQU0saUJBQWlCLEVBQUUsQ0FDM0MsQ0FDRixDQUFDO2lCQUNIO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxHQUFHLENBQ1QsS0FBSyxDQUFDLE1BQU0sQ0FDVixLQUFLLFVBQVUsQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLDRCQUE0QixDQUN2RCxVQUFVLENBQUMsV0FBVyxFQUN0QixJQUFJLENBQ0wsRUFBRSxDQUNKLENBQ0YsQ0FBQztpQkFDSDthQUNGO1lBQ0QsTUFBTTtRQUNSLEtBQUssY0FBYztZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixNQUFNO1FBQ1IsS0FBSyxTQUFTO1lBQ1osT0FBTyxDQUFDLEdBQUcsQ0FDVCxLQUFLLENBQUMsVUFBVSxDQUNkLE1BQU0sT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sTUFBTSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQy9FLENBQ0YsQ0FBQztZQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsTUFBTTtLQUNUO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1aWxkTWVzc2FnZXMgfSBmcm9tICcuLi9wYXJhbXMnO1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkTWVzc2FnZUhhbmRsZXIobWVzc2FnZTogQnVpbGRNZXNzYWdlcykge1xuICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgIGNhc2UgJ2JlZ2luJzpcbiAgICAgIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQoYEJ1aWxkIFwiJHttZXNzYWdlLnBhY2thZ2VOYW1lfVwiYCkpO1xuICAgICAgY29uc29sZS5sb2coJycpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndHNjJzpcbiAgICAgIGZvciAoY29uc3QgZGlhZ25vc3RpYyBvZiBtZXNzYWdlLmRpYWdub3N0aWNzKSB7XG4gICAgICAgIGlmIChkaWFnbm9zdGljLmZpbGUgJiYgZGlhZ25vc3RpYy5zdGFydCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICBjaGFyYWN0ZXIsXG4gICAgICAgICAgfSA9IGRpYWdub3N0aWMuZmlsZS5nZXRMaW5lQW5kQ2hhcmFjdGVyT2ZQb3NpdGlvbihkaWFnbm9zdGljLnN0YXJ0KTtcbiAgICAgICAgICBjb25zdCBkaWFnbm9zdGljTWVzc2FnZTogc3RyaW5nID0gdHMuZmxhdHRlbkRpYWdub3N0aWNNZXNzYWdlVGV4dChcbiAgICAgICAgICAgIGRpYWdub3N0aWMubWVzc2FnZVRleHQsXG4gICAgICAgICAgICAnXFxuJyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgY2hhbGsueWVsbG93KFxuICAgICAgICAgICAgICBgVFMke2RpYWdub3N0aWMuY29kZX0gOiAke2RpYWdub3N0aWMuZmlsZS5maWxlTmFtZX0gKCR7XG4gICAgICAgICAgICAgICAgbGluZSArIDFcbiAgICAgICAgICAgICAgfSwke2NoYXJhY3RlciArIDF9KTogJHtkaWFnbm9zdGljTWVzc2FnZX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgY2hhbGsueWVsbG93KFxuICAgICAgICAgICAgICBgVFMke2RpYWdub3N0aWMuY29kZX0gOiAke3RzLmZsYXR0ZW5EaWFnbm9zdGljTWVzc2FnZVRleHQoXG4gICAgICAgICAgICAgICAgZGlhZ25vc3RpYy5tZXNzYWdlVGV4dCxcbiAgICAgICAgICAgICAgICAnXFxuJyxcbiAgICAgICAgICAgICAgKX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwYWNrYWdlLWpzb24nOlxuICAgICAgY29uc29sZS5sb2coY2hhbGsuZ3JheShKU09OLnN0cmluZ2lmeShtZXNzYWdlLnBhY2thZ2VKc29uLCBudWxsLCAyKSkpO1xuICAgICAgY29uc29sZS5sb2coJycpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgY2hhbGsuYmx1ZUJyaWdodChcbiAgICAgICAgICBg8J+RjSAke21lc3NhZ2UucGFja2FnZU5hbWV9QCR7bWVzc2FnZS5wYWNrYWdlSnNvbi52ZXJzaW9ufSDihpIgJHttZXNzYWdlLm91dERpcn1gLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIGNvbnNvbGUubG9nKCcnKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG4iXX0=