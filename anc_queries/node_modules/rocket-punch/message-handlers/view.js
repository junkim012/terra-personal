import chalk from 'chalk';
export async function viewMessageHandler(message) {
    switch (message.type) {
        case 'view':
            console.log(`ðŸ“¦ ${chalk.bold(message.metadata.name)} <${message.packageConfig.version}@${message.packageConfig.tag}>`);
            const tagList = Object.keys(message.tags);
            const maxLength = Math.max(...tagList.map((tag) => tag.length));
            tagList.forEach((tag) => {
                console.log(message.packageConfig.tag === tag
                    ? chalk.blueBright(`${tag.padEnd(maxLength, ' ')} : ${message.tags[tag]} `) + '*'
                    : chalk.gray(`${tag.padEnd(maxLength, ' ')} : ${message.tags[tag]}`));
            });
            console.log('');
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yb2NrZXQtcHVuY2gvbWVzc2FnZS1oYW5kbGVycy92aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLE9BQXFCO0lBQzVELFFBQVEsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNwQixLQUFLLE1BQU07WUFDVCxPQUFPLENBQUMsR0FBRyxDQUNULE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUNyQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQ3hCLElBQUksT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEdBQUcsQ0FDakMsQ0FBQztZQUNGLE1BQU0sT0FBTyxHQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELE1BQU0sU0FBUyxHQUFXLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUV4RSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssR0FBRztvQkFDL0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQ2QsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQ3hELEdBQUcsR0FBRztvQkFDVCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDUixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDdkQsQ0FDTixDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLE1BQU07S0FDVDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgVmlld01lc3NhZ2VzIH0gZnJvbSAnLi4vcGFyYW1zJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZpZXdNZXNzYWdlSGFuZGxlcihtZXNzYWdlOiBWaWV3TWVzc2FnZXMpIHtcbiAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICBjYXNlICd2aWV3JzpcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBg8J+TpiAke2NoYWxrLmJvbGQobWVzc2FnZS5tZXRhZGF0YS5uYW1lKX0gPCR7XG4gICAgICAgICAgbWVzc2FnZS5wYWNrYWdlQ29uZmlnLnZlcnNpb25cbiAgICAgICAgfUAke21lc3NhZ2UucGFja2FnZUNvbmZpZy50YWd9PmAsXG4gICAgICApO1xuICAgICAgY29uc3QgdGFnTGlzdDogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhtZXNzYWdlLnRhZ3MpO1xuICAgICAgY29uc3QgbWF4TGVuZ3RoOiBudW1iZXIgPSBNYXRoLm1heCguLi50YWdMaXN0Lm1hcCgodGFnKSA9PiB0YWcubGVuZ3RoKSk7XG5cbiAgICAgIHRhZ0xpc3QuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIG1lc3NhZ2UucGFja2FnZUNvbmZpZy50YWcgPT09IHRhZ1xuICAgICAgICAgICAgPyBjaGFsay5ibHVlQnJpZ2h0KFxuICAgICAgICAgICAgICAgIGAke3RhZy5wYWRFbmQobWF4TGVuZ3RoLCAnICcpfSA6ICR7bWVzc2FnZS50YWdzW3RhZ119IGAsXG4gICAgICAgICAgICAgICkgKyAnKidcbiAgICAgICAgICAgIDogY2hhbGsuZ3JheShcbiAgICAgICAgICAgICAgICBgJHt0YWcucGFkRW5kKG1heExlbmd0aCwgJyAnKX0gOiAke21lc3NhZ2UudGFnc1t0YWddfWAsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCcnKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG4iXX0=