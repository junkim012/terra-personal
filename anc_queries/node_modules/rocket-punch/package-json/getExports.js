import { glob } from '@ssen/promised';
export async function getExports(exports, outDir) {
    const result = await glob(`**/*`, {
        cwd: outDir,
        nodir: true,
        ignore: ['**/*.d.ts', '**/*.js.map', 'public/*', 'bin/*'],
    });
    const files = new Set(result);
    const moduleDirectory = exports.main === 'module' ? '.' : './_module';
    const commonjsDirectory = exports.main === 'module' ? './_commonjs' : '.';
    const secondary = exports.main === 'module' ? 'commonjs' : 'module';
    const entry = result.filter((file) => !file.startsWith('_commonjs') &&
        !file.startsWith('_module') &&
        file !== 'index.js');
    const entryExports = {};
    for (const file of entry) {
        const key = `./${file.replace(/.js$/, '')}`;
        if (!files.has(`_${secondary}/${file}`)) {
            entryExports[key] = `./${file}`;
            continue;
        }
        entryExports[key] = {
            import: `${moduleDirectory}/${file}`,
            require: `${commonjsDirectory}/${file}`,
            node: `${commonjsDirectory}/${file}`,
            default: `${moduleDirectory}/${file}`,
        };
        entryExports[key + '.js'] = {
            import: `${moduleDirectory}/${file}`,
            require: `${commonjsDirectory}/${file}`,
            node: `${commonjsDirectory}/${file}`,
            default: `${moduleDirectory}/${file}`,
        };
        if (/\/index$/.test(key)) {
            entryExports[key.replace(/\/index$/, '')] = {
                import: `${moduleDirectory}/${file}`,
                require: `${commonjsDirectory}/${file}`,
                node: `${commonjsDirectory}/${file}`,
                default: `${moduleDirectory}/${file}`,
            };
        }
    }
    return {
        '.': {
            import: `${moduleDirectory}/index.js`,
            require: `${commonjsDirectory}/index.js`,
            node: `${commonjsDirectory}/index.js`,
            default: `${moduleDirectory}/index.js`,
        },
        './public/*': './public/*',
        ...entryExports,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RXhwb3J0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9yb2NrZXQtcHVuY2gvcGFja2FnZS1qc29uL2dldEV4cG9ydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXRDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsVUFBVSxDQUM5QixPQUErQixFQUMvQixNQUFjO0lBRWQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2hDLEdBQUcsRUFBRSxNQUFNO1FBQ1gsS0FBSyxFQUFFLElBQUk7UUFDWCxNQUFNLEVBQUUsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUM7S0FDMUQsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFOUIsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3RFLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzFFLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUVwRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUN6QixDQUFDLElBQUksRUFBRSxFQUFFLENBQ1AsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUM3QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO1FBQzNCLElBQUksS0FBSyxVQUFVLENBQ3RCLENBQUM7SUFFRixNQUFNLFlBQVksR0FBMkIsRUFBRSxDQUFDO0lBRWhELEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUU1QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1lBQ3ZDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ2hDLFNBQVM7U0FDVjtRQUVELFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRztZQUNsQixNQUFNLEVBQUUsR0FBRyxlQUFlLElBQUksSUFBSSxFQUFFO1lBQ3BDLE9BQU8sRUFBRSxHQUFHLGlCQUFpQixJQUFJLElBQUksRUFBRTtZQUN2QyxJQUFJLEVBQUUsR0FBRyxpQkFBaUIsSUFBSSxJQUFJLEVBQUU7WUFDcEMsT0FBTyxFQUFFLEdBQUcsZUFBZSxJQUFJLElBQUksRUFBRTtTQUN0QyxDQUFDO1FBRUYsWUFBWSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRztZQUMxQixNQUFNLEVBQUUsR0FBRyxlQUFlLElBQUksSUFBSSxFQUFFO1lBQ3BDLE9BQU8sRUFBRSxHQUFHLGlCQUFpQixJQUFJLElBQUksRUFBRTtZQUN2QyxJQUFJLEVBQUUsR0FBRyxpQkFBaUIsSUFBSSxJQUFJLEVBQUU7WUFDcEMsT0FBTyxFQUFFLEdBQUcsZUFBZSxJQUFJLElBQUksRUFBRTtTQUN0QyxDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHO2dCQUMxQyxNQUFNLEVBQUUsR0FBRyxlQUFlLElBQUksSUFBSSxFQUFFO2dCQUNwQyxPQUFPLEVBQUUsR0FBRyxpQkFBaUIsSUFBSSxJQUFJLEVBQUU7Z0JBQ3ZDLElBQUksRUFBRSxHQUFHLGlCQUFpQixJQUFJLElBQUksRUFBRTtnQkFDcEMsT0FBTyxFQUFFLEdBQUcsZUFBZSxJQUFJLElBQUksRUFBRTthQUN0QyxDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU87UUFDTCxHQUFHLEVBQUU7WUFDSCxNQUFNLEVBQUUsR0FBRyxlQUFlLFdBQVc7WUFDckMsT0FBTyxFQUFFLEdBQUcsaUJBQWlCLFdBQVc7WUFDeEMsSUFBSSxFQUFFLEdBQUcsaUJBQWlCLFdBQVc7WUFDckMsT0FBTyxFQUFFLEdBQUcsZUFBZSxXQUFXO1NBQ3ZDO1FBQ0QsWUFBWSxFQUFFLFlBQVk7UUFDMUIsR0FBRyxZQUFZO0tBQ2hCLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2xvYiB9IGZyb20gJ0Bzc2VuL3Byb21pc2VkJztcbmltcG9ydCB7IFBhY2thZ2VJbmZvIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBQYWNrYWdlSnNvbiB9IGZyb20gJ3R5cGUtZmVzdCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRFeHBvcnRzKFxuICBleHBvcnRzOiBQYWNrYWdlSW5mb1snZXhwb3J0cyddLFxuICBvdXREaXI6IHN0cmluZyxcbik6IFByb21pc2U8UGFja2FnZUpzb25bJ2V4cG9ydHMnXT4ge1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBnbG9iKGAqKi8qYCwge1xuICAgIGN3ZDogb3V0RGlyLFxuICAgIG5vZGlyOiB0cnVlLFxuICAgIGlnbm9yZTogWycqKi8qLmQudHMnLCAnKiovKi5qcy5tYXAnLCAncHVibGljLyonLCAnYmluLyonXSxcbiAgfSk7XG5cbiAgY29uc3QgZmlsZXMgPSBuZXcgU2V0KHJlc3VsdCk7XG5cbiAgY29uc3QgbW9kdWxlRGlyZWN0b3J5ID0gZXhwb3J0cy5tYWluID09PSAnbW9kdWxlJyA/ICcuJyA6ICcuL19tb2R1bGUnO1xuICBjb25zdCBjb21tb25qc0RpcmVjdG9yeSA9IGV4cG9ydHMubWFpbiA9PT0gJ21vZHVsZScgPyAnLi9fY29tbW9uanMnIDogJy4nO1xuICBjb25zdCBzZWNvbmRhcnkgPSBleHBvcnRzLm1haW4gPT09ICdtb2R1bGUnID8gJ2NvbW1vbmpzJyA6ICdtb2R1bGUnO1xuXG4gIGNvbnN0IGVudHJ5ID0gcmVzdWx0LmZpbHRlcihcbiAgICAoZmlsZSkgPT5cbiAgICAgICFmaWxlLnN0YXJ0c1dpdGgoJ19jb21tb25qcycpICYmXG4gICAgICAhZmlsZS5zdGFydHNXaXRoKCdfbW9kdWxlJykgJiZcbiAgICAgIGZpbGUgIT09ICdpbmRleC5qcycsXG4gICk7XG5cbiAgY29uc3QgZW50cnlFeHBvcnRzOiBQYWNrYWdlSnNvblsnZXhwb3J0cyddID0ge307XG5cbiAgZm9yIChjb25zdCBmaWxlIG9mIGVudHJ5KSB7XG4gICAgY29uc3Qga2V5ID0gYC4vJHtmaWxlLnJlcGxhY2UoLy5qcyQvLCAnJyl9YDtcblxuICAgIGlmICghZmlsZXMuaGFzKGBfJHtzZWNvbmRhcnl9LyR7ZmlsZX1gKSkge1xuICAgICAgZW50cnlFeHBvcnRzW2tleV0gPSBgLi8ke2ZpbGV9YDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGVudHJ5RXhwb3J0c1trZXldID0ge1xuICAgICAgaW1wb3J0OiBgJHttb2R1bGVEaXJlY3Rvcnl9LyR7ZmlsZX1gLFxuICAgICAgcmVxdWlyZTogYCR7Y29tbW9uanNEaXJlY3Rvcnl9LyR7ZmlsZX1gLFxuICAgICAgbm9kZTogYCR7Y29tbW9uanNEaXJlY3Rvcnl9LyR7ZmlsZX1gLFxuICAgICAgZGVmYXVsdDogYCR7bW9kdWxlRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICB9O1xuXG4gICAgZW50cnlFeHBvcnRzW2tleSArICcuanMnXSA9IHtcbiAgICAgIGltcG9ydDogYCR7bW9kdWxlRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICAgIHJlcXVpcmU6IGAke2NvbW1vbmpzRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICAgIG5vZGU6IGAke2NvbW1vbmpzRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICAgIGRlZmF1bHQ6IGAke21vZHVsZURpcmVjdG9yeX0vJHtmaWxlfWAsXG4gICAgfTtcblxuICAgIGlmICgvXFwvaW5kZXgkLy50ZXN0KGtleSkpIHtcbiAgICAgIGVudHJ5RXhwb3J0c1trZXkucmVwbGFjZSgvXFwvaW5kZXgkLywgJycpXSA9IHtcbiAgICAgICAgaW1wb3J0OiBgJHttb2R1bGVEaXJlY3Rvcnl9LyR7ZmlsZX1gLFxuICAgICAgICByZXF1aXJlOiBgJHtjb21tb25qc0RpcmVjdG9yeX0vJHtmaWxlfWAsXG4gICAgICAgIG5vZGU6IGAke2NvbW1vbmpzRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICAgICAgZGVmYXVsdDogYCR7bW9kdWxlRGlyZWN0b3J5fS8ke2ZpbGV9YCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAnLic6IHtcbiAgICAgIGltcG9ydDogYCR7bW9kdWxlRGlyZWN0b3J5fS9pbmRleC5qc2AsXG4gICAgICByZXF1aXJlOiBgJHtjb21tb25qc0RpcmVjdG9yeX0vaW5kZXguanNgLFxuICAgICAgbm9kZTogYCR7Y29tbW9uanNEaXJlY3Rvcnl9L2luZGV4LmpzYCxcbiAgICAgIGRlZmF1bHQ6IGAke21vZHVsZURpcmVjdG9yeX0vaW5kZXguanNgLFxuICAgIH0sXG4gICAgJy4vcHVibGljLyonOiAnLi9wdWJsaWMvKicsXG4gICAgLi4uZW50cnlFeHBvcnRzLFxuICB9O1xufVxuIl19