import { parseTSConfig, readTSConfig } from '@ssen/read-tsconfig';
import fs from 'fs-extra';
import path from 'path';
import ts from 'typescript';
export function getCompilerOptions({ searchPath, configName, packageInfo, buildType, declaration, }) {
    const { options: tsconfig } = fs.existsSync(path.join(searchPath, configName))
        ? readTSConfig(searchPath, configName)
        : { options: {} };
    const { options: info } = parseTSConfig(searchPath, {
        compilerOptions: packageInfo.compilerOptions,
    });
    const defaultValues = {
        downlevelIteration: true,
        allowSyntheticDefaultImports: true,
        esModuleInterop: true,
        strict: true,
        resolveJsonModule: true,
        allowJs: true,
        jsx: ts.JsxEmit.React,
        target: ts.ScriptTarget.ES2018,
    };
    const computed = Object.keys(defaultValues).reduce((result, name) => {
        var _a, _b;
        result[name] = (_b = (_a = info[name]) !== null && _a !== void 0 ? _a : tsconfig[name]) !== null && _b !== void 0 ? _b : defaultValues[name];
        return result;
    }, {});
    return {
        ...computed,
        module: buildType === 'module' ? ts.ModuleKind.ES2020 : ts.ModuleKind.CommonJS,
        moduleResolution: ts.ModuleResolutionKind.NodeJs,
        skipLibCheck: true,
        inlineSources: true,
        inlineSourceMap: true,
        declaration,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q29tcGlsZXJPcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JvY2tldC1wdW5jaC9ydWxlL2dldENvbXBpbGVyT3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMxQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBVzVCLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUNqQyxVQUFVLEVBQ1YsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsV0FBVyxHQUNKO0lBQ1AsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzVFLENBQUMsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztRQUN0QyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBd0IsRUFBRSxDQUFDO0lBQzFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFDLFVBQVUsRUFBRTtRQUNsRCxlQUFlLEVBQUUsV0FBVyxDQUFDLGVBQWU7S0FDN0MsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxhQUFhLEdBQWdDO1FBQ2pELGtCQUFrQixFQUFFLElBQUk7UUFDeEIsNEJBQTRCLEVBQUUsSUFBSTtRQUNsQyxlQUFlLEVBQUUsSUFBSTtRQUVyQixNQUFNLEVBQUUsSUFBSTtRQUVaLGlCQUFpQixFQUFFLElBQUk7UUFFdkIsT0FBTyxFQUFFLElBQUk7UUFDYixHQUFHLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLO1FBRXJCLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU07S0FDdEIsQ0FBQztJQUVYLE1BQU0sUUFBUSxHQUF1QixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sQ0FDcEUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7O1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQUEsTUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLG1DQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsbUNBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25FLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsRUFDRCxFQUF3QixDQUN6QixDQUFDO0lBRUYsT0FBTztRQUNMLEdBQUcsUUFBUTtRQUNYLE1BQU0sRUFDSixTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRO1FBQ3hFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNO1FBQ2hELFlBQVksRUFBRSxJQUFJO1FBQ2xCLGFBQWEsRUFBRSxJQUFJO1FBQ25CLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLFdBQVc7S0FDWixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlVFNDb25maWcsIHJlYWRUU0NvbmZpZyB9IGZyb20gJ0Bzc2VuL3JlYWQtdHNjb25maWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgUGFja2FnZUluZm8gfSBmcm9tICcuLi90eXBlcyc7XG5cbmludGVyZmFjZSBQYXJhbXMge1xuICBzZWFyY2hQYXRoOiBzdHJpbmc7XG4gIGNvbmZpZ05hbWU6IHN0cmluZztcbiAgcGFja2FnZUluZm86IFBhY2thZ2VJbmZvO1xuICBidWlsZFR5cGU6ICdtb2R1bGUnIHwgJ2NvbW1vbmpzJztcbiAgZGVjbGFyYXRpb246IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21waWxlck9wdGlvbnMoe1xuICBzZWFyY2hQYXRoLFxuICBjb25maWdOYW1lLFxuICBwYWNrYWdlSW5mbyxcbiAgYnVpbGRUeXBlLFxuICBkZWNsYXJhdGlvbixcbn06IFBhcmFtcyk6IHRzLkNvbXBpbGVyT3B0aW9ucyB7XG4gIGNvbnN0IHsgb3B0aW9uczogdHNjb25maWcgfSA9IGZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHNlYXJjaFBhdGgsIGNvbmZpZ05hbWUpKVxuICAgID8gcmVhZFRTQ29uZmlnKHNlYXJjaFBhdGgsIGNvbmZpZ05hbWUpXG4gICAgOiB7IG9wdGlvbnM6IHt9IGFzIHRzLkNvbXBpbGVyT3B0aW9ucyB9O1xuICBjb25zdCB7IG9wdGlvbnM6IGluZm8gfSA9IHBhcnNlVFNDb25maWcoc2VhcmNoUGF0aCwge1xuICAgIGNvbXBpbGVyT3B0aW9uczogcGFja2FnZUluZm8uY29tcGlsZXJPcHRpb25zLFxuICB9KTtcbiAgY29uc3QgZGVmYXVsdFZhbHVlczogUGFydGlhbDx0cy5Db21waWxlck9wdGlvbnM+ID0ge1xuICAgIGRvd25sZXZlbEl0ZXJhdGlvbjogdHJ1ZSxcbiAgICBhbGxvd1N5bnRoZXRpY0RlZmF1bHRJbXBvcnRzOiB0cnVlLFxuICAgIGVzTW9kdWxlSW50ZXJvcDogdHJ1ZSxcblxuICAgIHN0cmljdDogdHJ1ZSxcblxuICAgIHJlc29sdmVKc29uTW9kdWxlOiB0cnVlLFxuXG4gICAgYWxsb3dKczogdHJ1ZSxcbiAgICBqc3g6IHRzLkpzeEVtaXQuUmVhY3QsXG5cbiAgICB0YXJnZXQ6IHRzLlNjcmlwdFRhcmdldC5FUzIwMTgsXG4gIH0gYXMgY29uc3Q7XG5cbiAgY29uc3QgY29tcHV0ZWQ6IHRzLkNvbXBpbGVyT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpLnJlZHVjZShcbiAgICAocmVzdWx0LCBuYW1lKSA9PiB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBpbmZvW25hbWVdID8/IHRzY29uZmlnW25hbWVdID8/IGRlZmF1bHRWYWx1ZXNbbmFtZV07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAge30gYXMgdHMuQ29tcGlsZXJPcHRpb25zLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgLi4uY29tcHV0ZWQsXG4gICAgbW9kdWxlOlxuICAgICAgYnVpbGRUeXBlID09PSAnbW9kdWxlJyA/IHRzLk1vZHVsZUtpbmQuRVMyMDIwIDogdHMuTW9kdWxlS2luZC5Db21tb25KUyxcbiAgICBtb2R1bGVSZXNvbHV0aW9uOiB0cy5Nb2R1bGVSZXNvbHV0aW9uS2luZC5Ob2RlSnMsXG4gICAgc2tpcExpYkNoZWNrOiB0cnVlLFxuICAgIGlubGluZVNvdXJjZXM6IHRydWUsXG4gICAgaW5saW5lU291cmNlTWFwOiB0cnVlLFxuICAgIGRlY2xhcmF0aW9uLFxuICB9O1xufVxuIl19