import getPackageJson from 'package-json';
import process from 'process';
import { readPackages } from './entry/readPackages';
import { viewMessageHandler } from './message-handlers/view';
export async function view({ cwd = process.cwd(), sourceRoot = 'src', entry, onMessage = viewMessageHandler, }) {
    const internalPackages = await readPackages({
        cwd,
        sourceRoot,
        entry,
    });
    const originMetadatas = await Promise.all(Array.from(internalPackages.keys()).map((name) => getPackageJson(name, {
        fullMetadata: true,
        allVersions: true,
    }).catch(() => undefined)));
    const metadatas = originMetadatas.filter((metadata) => !!metadata);
    for (const metadata of metadatas) {
        if (!internalPackages.has(metadata.name)) {
            throw new Error(`undefined package ${metadata.name}`);
        }
        const info = internalPackages.get(metadata.name);
        const tags = metadata['dist-tags'];
        await onMessage({
            type: 'view',
            metadata,
            tags,
            packageConfig: info,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb2NrZXQtcHVuY2gvdmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGNBQWdDLE1BQU0sY0FBYyxDQUFDO0FBQzVELE9BQU8sT0FBTyxNQUFNLFNBQVMsQ0FBQztBQUM5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJN0QsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFDekIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFDbkIsVUFBVSxHQUFHLEtBQUssRUFDbEIsS0FBSyxFQUNMLFNBQVMsR0FBRyxrQkFBa0IsR0FDbkI7SUFDWCxNQUFNLGdCQUFnQixHQUE2QixNQUFNLFlBQVksQ0FBQztRQUNwRSxHQUFHO1FBQ0gsVUFBVTtRQUNWLEtBQUs7S0FDTixDQUFDLENBQUM7SUFFSCxNQUFNLGVBQWUsR0FBaUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNyRSxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDL0MsY0FBYyxDQUFDLElBQUksRUFBRTtRQUNuQixZQUFZLEVBQUUsSUFBSTtRQUNsQixXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUMxQixDQUNGLENBQUM7SUFFRixNQUFNLFNBQVMsR0FBbUIsZUFBZSxDQUFDLE1BQU0sQ0FDdEQsQ0FBQyxRQUFRLEVBQTRCLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUNuRCxDQUFDO0lBRUYsS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTLEVBQUU7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxNQUFNLElBQUksR0FBZ0IsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUMvRCxNQUFNLElBQUksR0FBMkIsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTNELE1BQU0sU0FBUyxDQUFDO1lBQ2QsSUFBSSxFQUFFLE1BQU07WUFDWixRQUFRO1lBQ1IsSUFBSTtZQUNKLGFBQWEsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRQYWNrYWdlSnNvbiwgeyBGdWxsTWV0YWRhdGEgfSBmcm9tICdwYWNrYWdlLWpzb24nO1xuaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgeyByZWFkUGFja2FnZXMgfSBmcm9tICcuL2VudHJ5L3JlYWRQYWNrYWdlcyc7XG5pbXBvcnQgeyB2aWV3TWVzc2FnZUhhbmRsZXIgfSBmcm9tICcuL21lc3NhZ2UtaGFuZGxlcnMvdmlldyc7XG5pbXBvcnQgeyBWaWV3UGFyYW1zIH0gZnJvbSAnLi9wYXJhbXMnO1xuaW1wb3J0IHsgUGFja2FnZUluZm8gfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZpZXcoe1xuICBjd2QgPSBwcm9jZXNzLmN3ZCgpLFxuICBzb3VyY2VSb290ID0gJ3NyYycsXG4gIGVudHJ5LFxuICBvbk1lc3NhZ2UgPSB2aWV3TWVzc2FnZUhhbmRsZXIsXG59OiBWaWV3UGFyYW1zKSB7XG4gIGNvbnN0IGludGVybmFsUGFja2FnZXM6IE1hcDxzdHJpbmcsIFBhY2thZ2VJbmZvPiA9IGF3YWl0IHJlYWRQYWNrYWdlcyh7XG4gICAgY3dkLFxuICAgIHNvdXJjZVJvb3QsXG4gICAgZW50cnksXG4gIH0pO1xuXG4gIGNvbnN0IG9yaWdpbk1ldGFkYXRhczogKEZ1bGxNZXRhZGF0YSB8IHVuZGVmaW5lZClbXSA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIEFycmF5LmZyb20oaW50ZXJuYWxQYWNrYWdlcy5rZXlzKCkpLm1hcCgobmFtZSkgPT5cbiAgICAgIGdldFBhY2thZ2VKc29uKG5hbWUsIHtcbiAgICAgICAgZnVsbE1ldGFkYXRhOiB0cnVlLFxuICAgICAgICBhbGxWZXJzaW9uczogdHJ1ZSxcbiAgICAgIH0pLmNhdGNoKCgpID0+IHVuZGVmaW5lZCksXG4gICAgKSxcbiAgKTtcblxuICBjb25zdCBtZXRhZGF0YXM6IEZ1bGxNZXRhZGF0YVtdID0gb3JpZ2luTWV0YWRhdGFzLmZpbHRlcihcbiAgICAobWV0YWRhdGEpOiBtZXRhZGF0YSBpcyBGdWxsTWV0YWRhdGEgPT4gISFtZXRhZGF0YSxcbiAgKTtcblxuICBmb3IgKGNvbnN0IG1ldGFkYXRhIG9mIG1ldGFkYXRhcykge1xuICAgIGlmICghaW50ZXJuYWxQYWNrYWdlcy5oYXMobWV0YWRhdGEubmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5kZWZpbmVkIHBhY2thZ2UgJHttZXRhZGF0YS5uYW1lfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGluZm86IFBhY2thZ2VJbmZvID0gaW50ZXJuYWxQYWNrYWdlcy5nZXQobWV0YWRhdGEubmFtZSkhO1xuICAgIGNvbnN0IHRhZ3M6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSBtZXRhZGF0YVsnZGlzdC10YWdzJ107XG5cbiAgICBhd2FpdCBvbk1lc3NhZ2Uoe1xuICAgICAgdHlwZTogJ3ZpZXcnLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICB0YWdzLFxuICAgICAgcGFja2FnZUNvbmZpZzogaW5mbyxcbiAgICB9KTtcbiAgfVxufVxuIl19